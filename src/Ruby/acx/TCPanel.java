/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * TCPanel.java
 *
 * Created on Feb 17, 2012, 10:53:30 AM
 */
package Ruby.acx;

import Ruby.APMain;
import Ruby.APController;
import Ruby.DBClient;
import Ruby.model.AXCharge;
import Ruby.model.AXNode;
import Ruby.model.AXTier;
import Ruby.model.TCDeduction;
import Ruby.model.TCValue;
import Ruby.model.TCWaiver;
import Ruby.sms.ALController;
import java.awt.Component;
import java.awt.EventQueue;
import java.awt.event.ItemEvent;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Objects;
import java.util.TreeMap;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.tree.DefaultMutableTreeNode;

/**
 *
 * @author Pecherk
 */
public final class TCPanel extends javax.swing.JPanel
{
    private String channel;
    private TCValue value = new TCValue();
    private AXCharge charge = new AXCharge();
    private TreeMap<String, AXCharge> charges = new TreeMap<>();
    private static final ATBox box = new ATBox(APMain.acxLog);

    /**
     * Creates new form TCPanel
     */
    public TCPanel()
    {
        initComponents();
        initDialog();
    }

    public void initDialog()
    {
        chargesDialog.setIconImage(APMain.getIconImage());
        chargesDialog.setContentPane(this);
        chargesDialog.pack();
        chargesDialog.setResizable(false);
        chargesDialog.setLocationRelativeTo(APMain.apFrame);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        chargesDialog = new javax.swing.JDialog();
        detailsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        descriptionField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        chargeAccountBox = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        statusBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        codeField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        sysUserField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        sysDateField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        chargeLedgerField = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        cancelButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        saveButton = new javax.swing.JButton();
        waiversPanel = new javax.swing.JPanel();
        waiverDisplayPanel = new javax.swing.JPanel();
        matchLabel = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        waivedPercentageField = new javax.swing.JTextField();
        jSeparator4 = new javax.swing.JSeparator();
        waiverButton = new javax.swing.JButton();
        waiverProductBox = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        matchAccountBox = new javax.swing.JComboBox();
        jLabel20 = new javax.swing.JLabel();
        waiverConditionBox = new javax.swing.JComboBox<>();
        thresholdField = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        waiverTreeScroller = new javax.swing.JScrollPane();
        waiverTree = new javax.swing.JTree();
        valuePanel = new javax.swing.JPanel();
        tiersPanel = new javax.swing.JPanel();
        tierDisplayPanel = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        tierMinField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        tierMaxField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        tierValueField = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        tierButton = new javax.swing.JButton();
        tierTreeScroller = new javax.swing.JScrollPane();
        tierTree = new javax.swing.JTree();
        valueTreeScroller = new javax.swing.JScrollPane();
        valueTree = new javax.swing.JTree();
        jPanel1 = new javax.swing.JPanel();
        valueLabel = new javax.swing.JLabel();
        valueField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        minAmountField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        maxAmountField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        chargeTypeBox = new javax.swing.JComboBox();
        deductionsPanel = new javax.swing.JPanel();
        deductionDisplayPanel = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        deductionButton = new javax.swing.JButton();
        deductionBasisBox = new javax.swing.JComboBox<>();
        jLabel23 = new javax.swing.JLabel();
        deductionDescriptionField = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jSeparator6 = new javax.swing.JSeparator();
        deductionValueField = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        deductionValueTypeBox = new javax.swing.JComboBox<>();
        deductionAccountBox = new javax.swing.JComboBox<>();
        deductionTreeScroller = new javax.swing.JScrollPane();
        deductionTree = new javax.swing.JTree();
        jSeparator5 = new javax.swing.JSeparator();
        copyButton = new javax.swing.JButton();
        schemeBox = new javax.swing.JComboBox<>();
        chargeTreeScroller = new javax.swing.JScrollPane();
        chargeTree = new javax.swing.JTree();

        chargesDialog.setTitle("Ruby Charges");
        chargesDialog.setIconImage(APMain.getIconImage());
        chargesDialog.setModal(true);
        chargesDialog.setName("chargesDialog"); // NOI18N

        javax.swing.GroupLayout chargesDialogLayout = new javax.swing.GroupLayout(chargesDialog.getContentPane());
        chargesDialog.getContentPane().setLayout(chargesDialogLayout);
        chargesDialogLayout.setHorizontalGroup(
            chargesDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        chargesDialogLayout.setVerticalGroup(
            chargesDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        detailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "Charge Details"));

        jLabel1.setText("Description");

        descriptionField.setToolTipText("Charge Description");

        jLabel6.setText("Charge Who");

        chargeAccountBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "S~Customer", "R~Merchant" }));
        chargeAccountBox.setToolTipText("Charge Account");

        jLabel7.setText("Status");

        statusBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "A~Active", "C~Closed" }));
        statusBox.setToolTipText("Charge Status");

        jLabel3.setText("Charge Code");

        codeField.setForeground(new java.awt.Color(51, 102, 255));
        codeField.setToolTipText("Charge Code");
        codeField.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                codeFieldFocusLost(evt);
            }
        });

        jLabel8.setText("Date Modified");

        sysUserField.setEditable(false);
        sysUserField.setForeground(new java.awt.Color(51, 102, 255));
        sysUserField.setToolTipText("Modified By");

        jLabel9.setText("Modified By");

        sysDateField.setEditable(false);
        sysDateField.setForeground(new java.awt.Color(51, 102, 255));
        sysDateField.setToolTipText("Date Modified");

        jLabel10.setText("Income Ledger");

        chargeLedgerField.setToolTipText("Income Ledger");

        javax.swing.GroupLayout detailsPanelLayout = new javax.swing.GroupLayout(detailsPanel);
        detailsPanel.setLayout(detailsPanelLayout);
        detailsPanelLayout.setHorizontalGroup(
            detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sysDateField, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                    .addComponent(chargeLedgerField)
                    .addComponent(codeField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(detailsPanelLayout.createSequentialGroup()
                        .addComponent(chargeAccountBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(statusBox, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(descriptionField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sysUserField))
                .addContainerGap())
        );
        detailsPanelLayout.setVerticalGroup(
            detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailsPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(descriptionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(codeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(chargeAccountBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(statusBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel10)
                    .addComponent(chargeLedgerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(sysDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(sysUserField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        cancelButton.setText("Close");
        cancelButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cancelButtonActionPerformed(evt);
            }
        });

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                saveButtonActionPerformed(evt);
            }
        });

        waiversPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "Charge Waivers"));

        waiverDisplayPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "Waiver Details"));

        matchLabel.setText("Matches");

        jLabel16.setText("Waived %");

        waivedPercentageField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        waivedPercentageField.setToolTipText("Waived Percentage");
        waivedPercentageField.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                waivedPercentageFieldFocusLost(evt);
            }
        });

        waiverButton.setText("Save Waiver");
        waiverButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                waiverButtonActionPerformed(evt);
            }
        });

        waiverProductBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---select---" }));
        waiverProductBox.setToolTipText("Waiver Product");

        jLabel15.setText("Apply If");

        matchAccountBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "C~Charge Account", "A~Any Account", "B~Both Accounts" }));
        matchAccountBox.setToolTipText("Match Account");
        matchAccountBox.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                matchAccountBoxItemStateChanged(evt);
            }
        });

        jLabel20.setText("Applicable");

        waiverConditionBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ALL~For All Transactions", "MCL~When Monthly Count is Less Than", "MCM~When Monthly Count is More Than", "MTL~When Monthly Total is Less Than", "MTM~When Monthly Total is More Than" }));
        waiverConditionBox.setToolTipText("Waiver Condition");
        waiverConditionBox.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                waiverConditionBoxItemStateChanged(evt);
            }
        });

        thresholdField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        thresholdField.setToolTipText("Waiver Threshold");

        jLabel21.setText("Threshold");

        javax.swing.GroupLayout waiverDisplayPanelLayout = new javax.swing.GroupLayout(waiverDisplayPanel);
        waiverDisplayPanel.setLayout(waiverDisplayPanelLayout);
        waiverDisplayPanelLayout.setHorizontalGroup(
            waiverDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(waiverDisplayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(waiverDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator4)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, waiverDisplayPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(waiverButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(waiverDisplayPanelLayout.createSequentialGroup()
                        .addGroup(waiverDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(waiverDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(matchAccountBox, 0, 1, Short.MAX_VALUE)
                            .addComponent(waiverConditionBox, 0, 1, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(waiverDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(matchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel21))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(waiverDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(waiverDisplayPanelLayout.createSequentialGroup()
                                .addComponent(thresholdField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(waivedPercentageField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(waiverProductBox, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        waiverDisplayPanelLayout.setVerticalGroup(
            waiverDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(waiverDisplayPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(waiverDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(matchLabel)
                    .addComponent(waiverProductBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(matchAccountBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(waiverDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(waivedPercentageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20)
                    .addComponent(waiverConditionBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21)
                    .addComponent(thresholdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(waiverButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        waiverTreeScroller.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray));

        waiverTree.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Waivers");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Add Waiver");
        treeNode1.add(treeNode2);
        waiverTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        waiverTree.setCellRenderer(new TRenderer());
        waiverTree.setRootVisible(false);
        waiverTree.setShowsRootHandles(true);
        waiverTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener()
        {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt)
            {
                waiverTreeValueChanged(evt);
            }
        });
        waiverTreeScroller.setViewportView(waiverTree);

        javax.swing.GroupLayout waiversPanelLayout = new javax.swing.GroupLayout(waiversPanel);
        waiversPanel.setLayout(waiversPanelLayout);
        waiversPanelLayout.setHorizontalGroup(
            waiversPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, waiversPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(waiverTreeScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(waiverDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        waiversPanelLayout.setVerticalGroup(
            waiversPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(waiversPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(waiversPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(waiverDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(waiverTreeScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );

        valuePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "Charge Value"));

        tiersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "Charge Tiers")));

        tierDisplayPanel.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray));

        jLabel11.setText("Tier Limits");

        tierMinField.setEditable(false);
        tierMinField.setForeground(new java.awt.Color(51, 102, 255));
        tierMinField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        tierMinField.setToolTipText("Tier Floor");

        jLabel12.setText("-");

        tierMaxField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        tierMaxField.setToolTipText("Tier Ceiling");
        tierMaxField.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                tierMaxFieldFocusLost(evt);
            }
        });

        jLabel13.setText("Charge");

        tierValueField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        tierValueField.setToolTipText("Tier Charge");
        tierValueField.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                tierValueFieldFocusLost(evt);
            }
        });

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        tierButton.setText("Save Tier");
        tierButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                tierButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tierDisplayPanelLayout = new javax.swing.GroupLayout(tierDisplayPanel);
        tierDisplayPanel.setLayout(tierDisplayPanelLayout);
        tierDisplayPanelLayout.setHorizontalGroup(
            tierDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tierDisplayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tierMinField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tierMaxField, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tierValueField, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tierButton)
                .addContainerGap())
        );
        tierDisplayPanelLayout.setVerticalGroup(
            tierDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tierDisplayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tierDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSeparator3)
                    .addGroup(tierDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel11)
                        .addComponent(tierMinField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12)
                        .addComponent(tierMaxField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel13)
                        .addComponent(tierValueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tierButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tierTreeScroller.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray));

        tierTree.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Tiers");
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Add Tier");
        treeNode1.add(treeNode2);
        tierTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        tierTree.setCellRenderer(new TRenderer());
        tierTree.setRootVisible(false);
        tierTree.setShowsRootHandles(true);
        tierTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener()
        {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt)
            {
                tierTreeValueChanged(evt);
            }
        });
        tierTreeScroller.setViewportView(tierTree);

        javax.swing.GroupLayout tiersPanelLayout = new javax.swing.GroupLayout(tiersPanel);
        tiersPanel.setLayout(tiersPanelLayout);
        tiersPanelLayout.setHorizontalGroup(
            tiersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tiersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tierTreeScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tierDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        tiersPanelLayout.setVerticalGroup(
            tiersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tiersPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(tiersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tierTreeScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(tierDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );

        valueTreeScroller.setBorder(null);

        valueTree.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Currencies");
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("USD~US Dollar");
        treeNode1.add(treeNode2);
        valueTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        valueTree.setCellRenderer(new TRenderer());
        valueTree.setRootVisible(false);
        valueTree.setShowsRootHandles(true);
        valueTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener()
        {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt)
            {
                valueTreeValueChanged(evt);
            }
        });
        valueTreeScroller.setViewportView(valueTree);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "Value Details"));

        valueLabel.setText("Charge Value");

        valueField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        valueField.setToolTipText("Charge Value");
        valueField.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                valueFieldFocusLost(evt);
            }
        });

        jLabel4.setText("Min. Charge");

        minAmountField.setEditable(false);
        minAmountField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        minAmountField.setToolTipText("Minimum Charge");

        jLabel5.setText("Max. Charge");

        maxAmountField.setEditable(false);
        maxAmountField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        maxAmountField.setToolTipText("Maximum Charge");

        jLabel2.setText("Charge Type");

        chargeTypeBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "C~Constant", "P~Percentage", "T~Tiered" }));
        chargeTypeBox.setToolTipText("Charge Type");
        chargeTypeBox.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                chargeTypeBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(minAmountField)
                    .addComponent(chargeTypeBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(valueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(valueField, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                    .addComponent(maxAmountField))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(valueLabel)
                    .addComponent(valueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(chargeTypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(minAmountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(maxAmountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        deductionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "Charge Deductions")));

        deductionDisplayPanel.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray));

        jLabel22.setText("Apply");

        deductionButton.setText("Save Deduction");
        deductionButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                deductionButtonActionPerformed(evt);
            }
        });

        deductionBasisBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---select---", "A~As Expense", "B~As Share", "C~As Tax", "D~As Duty", "E~After Tax" }));
        deductionBasisBox.setToolTipText("Deduction Type");

        jLabel23.setText("Description");

        deductionDescriptionField.setToolTipText("Deduction Description");

        jLabel25.setText("Value");

        deductionValueField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        deductionValueField.setToolTipText("Deduction Value");
        deductionValueField.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                deductionValueFieldFocusLost(evt);
            }
        });

        jLabel17.setText("Account");

        jLabel18.setText("Value Type");

        deductionValueTypeBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "P~Percentage", "C~Constant" }));
        deductionValueTypeBox.setToolTipText("Deduction Value Type");

        deductionAccountBox.setEditable(true);
        deductionAccountBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AA~Agent Account", "CA~Contra Account" }));
        deductionAccountBox.setToolTipText("Deduction Account");

        javax.swing.GroupLayout deductionDisplayPanelLayout = new javax.swing.GroupLayout(deductionDisplayPanel);
        deductionDisplayPanel.setLayout(deductionDisplayPanelLayout);
        deductionDisplayPanelLayout.setHorizontalGroup(
            deductionDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deductionDisplayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(deductionDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator6)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, deductionDisplayPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(deductionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(deductionDisplayPanelLayout.createSequentialGroup()
                        .addGroup(deductionDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(deductionDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deductionAccountBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deductionBasisBox, 0, 1, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(deductionDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(deductionDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(deductionDisplayPanelLayout.createSequentialGroup()
                                .addComponent(deductionValueTypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel25)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deductionValueField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(deductionDescriptionField))))
                .addContainerGap())
        );
        deductionDisplayPanelLayout.setVerticalGroup(
            deductionDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deductionDisplayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(deductionDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(deductionBasisBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23)
                    .addComponent(deductionDescriptionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(deductionDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jLabel25)
                    .addComponent(deductionValueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(deductionValueTypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deductionAccountBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deductionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        deductionTreeScroller.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray));

        deductionTree.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Deductions");
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Add Deduction");
        treeNode1.add(treeNode2);
        deductionTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        deductionTree.setCellRenderer(new TRenderer());
        deductionTree.setRootVisible(false);
        deductionTree.setShowsRootHandles(true);
        deductionTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener()
        {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt)
            {
                deductionTreeValueChanged(evt);
            }
        });
        deductionTreeScroller.setViewportView(deductionTree);

        javax.swing.GroupLayout deductionsPanelLayout = new javax.swing.GroupLayout(deductionsPanel);
        deductionsPanel.setLayout(deductionsPanelLayout);
        deductionsPanelLayout.setHorizontalGroup(
            deductionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, deductionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deductionTreeScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deductionDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        deductionsPanelLayout.setVerticalGroup(
            deductionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deductionsPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(deductionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(deductionDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deductionTreeScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout valuePanelLayout = new javax.swing.GroupLayout(valuePanel);
        valuePanel.setLayout(valuePanelLayout);
        valuePanelLayout.setHorizontalGroup(
            valuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, valuePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(valueTreeScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(valuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tiersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deductionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        valuePanelLayout.setVerticalGroup(
            valuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(valuePanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(valuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(valuePanelLayout.createSequentialGroup()
                        .addComponent(valueTreeScroller)
                        .addContainerGap())
                    .addGroup(valuePanelLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tiersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deductionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10))))
        );

        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);

        copyButton.setText("Copy");
        copyButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                copyButtonActionPerformed(evt);
            }
        });

        schemeBox.setBackground(new java.awt.Color(102, 204, 255));
        schemeBox.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        schemeBox.setForeground(java.awt.Color.white);
        schemeBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "S01~SMS Charges" }));
        schemeBox.setToolTipText("Charge Scheme");
        schemeBox.setBorder(null);
        schemeBox.setFocusable(false);
        ((JLabel)schemeBox.getRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
        ((JLabel)schemeBox.getRenderer()).setVerticalAlignment(SwingConstants.CENTER);
        schemeBox.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                schemeBoxItemStateChanged(evt);
            }
        });

        chargeTreeScroller.setBorder(null);

        chargeTree.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 0, 0, 0));
        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("POS Charges");
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Charge");
        treeNode1.add(treeNode2);
        chargeTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        chargeTree.setCellRenderer(new TRenderer());
        chargeTree.setRootVisible(false);
        chargeTree.setShowsRootHandles(true);
        chargeTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener()
        {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt)
            {
                chargeTreeValueChanged(evt);
            }
        });
        chargeTreeScroller.setViewportView(chargeTree);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(schemeBox, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chargeTreeScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(valuePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(waiversPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(detailsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(copyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(detailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(valuePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(waiversPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 1, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator2)
                            .addComponent(cancelButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator5)
                            .addComponent(copyButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(schemeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(chargeTreeScroller)))
                .addContainerGap())
        );

        valuePanel.getAccessibleContext().setAccessibleDescription("");
    }// </editor-fold>//GEN-END:initComponents

    private void chargeTypeBoxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_chargeTypeBoxItemStateChanged
    {//GEN-HEADEREND:event_chargeTypeBoxItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED)
        {
            String chargeType = getWorker().getBoxValue(chargeTypeBox);
            minAmountField.setEditable("P".equals(chargeType));
            maxAmountField.setEditable("P".equals(chargeType));
            valueField.setEditable(!"T".equals(chargeType));
            if (Objects.equals(chargeType, getValue().getChargeType()))
            {
                minAmountField.setText(getValue().getMinAmount().toPlainString());
                maxAmountField.setText(getValue().getMaxAmount().toPlainString());
                valueField.setText(getValue().getValue().toPlainString());
            }
            else
            {
                valueField.setText("");
                minAmountField.setText("0.00");
                maxAmountField.setText("0.00");
            }
            switch (chargeType)
            {
                case "P":
                    valueLabel.setText("Percentage");
                    break;
                case "T":
                    valueField.setText("0.00");
                    valueLabel.setText("Charge Value");
                    break;
                default:
                    valueLabel.setText("Charge Amount");
                    break;
            }
            setTiersPanel();
        }
    }//GEN-LAST:event_chargeTypeBoxItemStateChanged

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelButtonActionPerformed
    {//GEN-HEADEREND:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        EventQueue.invokeLater(()
                -> 
                {
                    chargesDialog.setVisible(false);
        });
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void chargeTreeValueChanged(javax.swing.event.TreeSelectionEvent evt)//GEN-FIRST:event_chargeTreeValueChanged
    {//GEN-HEADEREND:event_chargeTreeValueChanged
        // TODO add your handling code here:
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) chargeTree.getLastSelectedPathComponent();
        if (selectedNode != null)
        {
            if (selectedNode.getUserObject() instanceof AXCharge)
            {
                displayCharge((AXCharge) selectedNode.getUserObject());
            }
            else
            {
                acceptCharge();
            }
        }
    }//GEN-LAST:event_chargeTreeValueChanged

    public void showDialog(String channel)
    {
        setChannel(channel);
        setSchemeBox();
        chargesDialog.setTitle((getChannel().length() > 3 ? getWorker().capitalize(getChannel()) : getChannel()) + " Charges");
        EventQueue.invokeLater(()
                -> 
                {
                    chargesDialog.setVisible(true);
        });
    }

    private void setSchemeBox()
    {
        schemeBox.removeAllItems();
        getdClient().querySchemes(getChannel()).values().stream().forEach((scheme)
                -> 
                {
                    schemeBox.addItem(scheme.getCode() + "~" + scheme.getDescription());
        });
        setChargeTree();
    }

    public void setChargeTree()
    {
        DefaultMutableTreeNode rootNode = ((DefaultMutableTreeNode) chargeTree.getModel().getRoot());
        setCharges(getdClient().queryCharges(getWorker().getBoxValue(schemeBox)));

        rootNode.removeAllChildren();
        rootNode.add(new DefaultMutableTreeNode("Add Charge"));
        for (AXCharge aXCharge : getWorker().sortArray(getCharges().values().toArray(new AXCharge[0]), true))
        {
            rootNode.add(new DefaultMutableTreeNode(aXCharge));
        }
        getWorker().expandAllNodes(chargeTree, AXCharge.class);
    }

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveButtonActionPerformed
    {//GEN-HEADEREND:event_saveButtonActionPerformed
        // TODO add your handling code here:
        if (getWorker().validateFields(chargesDialog, this, tiersPanel, waiversPanel, deductionsPanel) && validateTiers())
        {
            boolean exists = !getWorker().isBlank(getCharge().getRecId());
            getCharge().setRecId(exists ? getCharge().getRecId() : getdClient().nextChargeId());
            getCharge().setCode(codeField.getText().trim());

            getCharge().setDescription(descriptionField.getText().trim());
            getCharge().setChargeAccount(getWorker().getBoxValue(chargeAccountBox));

            getCharge().setChargeLedger(chargeLedgerField.getText().trim());
            getCharge().setStatus(getWorker().getBoxValue(statusBox));
            getCharge().setSysUser(ULPanel.getUser().getStaffName());

            getCharge().setScheme(getWorker().getBoxValue(schemeBox));
            getCharge().setSysDate(new Date());
            updateValue();

            boolean proceed = exists
                    ? (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(chargesDialog, "Are you sure you want to save changes to this charge?", "Update Charge?", JOptionPane.YES_NO_OPTION))
                    : (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(chargesDialog, "Are you sure you want to save this new charge?", "Save Charge?", JOptionPane.YES_NO_OPTION));
            if (proceed)
            {
                getCharges().put(getCharge().getCode(), getCharge());
                if (getdClient().upsertCharge(getCharge()))
                {
                    JOptionPane.showMessageDialog(chargesDialog, "Charge saved successfully.");
                    setChargeTree();
                }
                else
                {
                    JOptionPane.showMessageDialog(chargesDialog, "Unable to save charge. Please refer to log for more details.", "Save Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private boolean validateTiers()
    {
        for (TCValue val : getCharge().getValues().values())
        {
            if (Objects.equals(val.getChargeType(), "T") && val.getTiers().isEmpty())
            {
                JOptionPane.showMessageDialog(chargesDialog, "Tiers required for [ " + val.getCurrency() + " ] charge value.", "Missing Tiers", JOptionPane.ERROR_MESSAGE);
                getWorker().selectTreeNode(valueTree, val.getCurrency());
                return false;
            }
        }
        return true;
    }

    private void tierTreeValueChanged(javax.swing.event.TreeSelectionEvent evt)//GEN-FIRST:event_tierTreeValueChanged
    {//GEN-HEADEREND:event_tierTreeValueChanged
        // TODO add your handling code here:
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) tierTree.getLastSelectedPathComponent();
        if (selectedNode != null)
        {
            if (selectedNode.getUserObject() instanceof AXTier)
            {
                displayTier((AXTier) selectedNode.getUserObject());
            }
            else
            {
                acceptTier();
            }
        }
}//GEN-LAST:event_tierTreeValueChanged

    private void tierMaxFieldFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_tierMaxFieldFocusLost
    {//GEN-HEADEREND:event_tierMaxFieldFocusLost
        // TODO add your handling code here:
        String maxAmt = tierMaxField.getText().trim();
        if (!getWorker().isBlank(maxAmt))
        {
            BigDecimal ceiling;
            if ((ceiling = getWorker().convertToType(maxAmt, BigDecimal.class)) != null)
            {
                getWorker().formatDecimalValue(tierMaxField);
                tierMinField.setText(getTierFloor(ceiling).toPlainString());
                if (getValue().getTiers().containsKey(tierMaxField.getText()))
                {
                    getWorker().selectTreeNode(tierTree, getValue().getTiers().get(tierMaxField.getText()));
                }
            }
            else
            {
                tierMaxField.requestFocus();
                tierMaxField.selectAll();
            }
        }
    }//GEN-LAST:event_tierMaxFieldFocusLost

    private void tierButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_tierButtonActionPerformed
    {//GEN-HEADEREND:event_tierButtonActionPerformed
        // TODO add your handling code here:
        boolean save = tierButton.getText().equals("Save Tier");
        if (save ? getWorker().validateFields(chargesDialog, tiersPanel) : true)
        {
            AXTier tXTier = new AXTier();
            tXTier.setTierMax(getWorker().formatDecimal(new BigDecimal(tierMaxField.getText().trim())));
            tXTier.setValue(getWorker().formatDecimal(new BigDecimal(tierValueField.getText().trim())));
            tXTier.setTierMin(getTierFloor(tXTier.getTierMax()));
            if (save)
            {
                getValue().getTiers().put(tXTier.getTierMax(), tXTier);
                if (getValue().getTiers().containsKey(tXTier.getTierMax()))
                {
                    JOptionPane.showMessageDialog(chargesDialog, "Tier saved successfully.");
                    getCharge().getValues().put(getValue().getCurrency(), getValue());
                    setTierTree();
                    getWorker().selectTreeNode(tierTree, tXTier);
                }
            }
            else
            {
                getValue().getTiers().remove(tXTier.getTierMax());
                if (!getValue().getTiers().containsKey(tXTier.getTierMax()))
                {
                    JOptionPane.showMessageDialog(chargesDialog, "Tier removed successfully.");
                    getCharge().getValues().put(getValue().getCurrency(), getValue());
                    setTierTree();
                }
            }
        }
    }//GEN-LAST:event_tierButtonActionPerformed

    private void tierValueFieldFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_tierValueFieldFocusLost
    {//GEN-HEADEREND:event_tierValueFieldFocusLost
        // TODO add your handling code here:
        if (!getWorker().isBlank(tierValueField.getText()))
        {
            if (getWorker().isPositiveNumber(tierValueField.getText().trim()))
            {
                getWorker().formatDecimalValue(tierValueField);
            }
            else
            {
                tierValueField.requestFocus();
                tierValueField.selectAll();
            }
        }
    }//GEN-LAST:event_tierValueFieldFocusLost

    private void waivedPercentageFieldFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_waivedPercentageFieldFocusLost
    {//GEN-HEADEREND:event_waivedPercentageFieldFocusLost
        // TODO add your handling code here:
        if (!getWorker().isBlank(waivedPercentageField.getText()))
        {
            BigDecimal perc = getWorker().convertToType(waivedPercentageField.getText().trim(), BigDecimal.class);
            if (!getWorker().validatePercentage(perc))
            {
                JOptionPane.showMessageDialog(chargesDialog, "Invalid waiver percentage [it must be a number between 0 and 100].");
                waivedPercentageField.requestFocus();
                waivedPercentageField.selectAll();
            }
            else
            {
                getWorker().formatDecimalValue(waivedPercentageField);
            }
        }
}//GEN-LAST:event_waivedPercentageFieldFocusLost

    private void waiverButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_waiverButtonActionPerformed
    {//GEN-HEADEREND:event_waiverButtonActionPerformed
        // TODO add your handling code here:
        boolean save = waiverButton.getText().equals("Save Waiver");
        if (save ? getWorker().validateFields(chargesDialog, waiversPanel) : true)
        {
            TCWaiver tXWaiver = new TCWaiver();
            tXWaiver.setProductId(getWorker().getBoxValue(waiverProductBox, Long.class));
            tXWaiver.setMatchAccount(getWorker().getBoxValue(matchAccountBox));
            tXWaiver.setWaivedPercentage(new BigDecimal(waivedPercentageField.getText().trim()));
            tXWaiver.setWaiverCondition(getWorker().getBoxValue(waiverConditionBox));
            tXWaiver.setThresholdValue(!getWorker().isBlank(thresholdField.getText()) ? new BigDecimal(thresholdField.getText().trim()) : BigDecimal.ZERO);

            if (save)
            {
                getCharge().getWaivers().put(tXWaiver.getProductId(), tXWaiver);
                if (getCharge().getWaivers().containsKey(tXWaiver.getProductId()))
                {
                    JOptionPane.showMessageDialog(chargesDialog, "Waiver saved successfully.");
                    setWaiverTree();
                    getWorker().selectTreeNode(waiverTree, tXWaiver.getProductId());
                }
            }
            else
            {
                getCharge().getWaivers().remove(tXWaiver.getProductId());
                if (!charge.getWaivers().containsKey(tXWaiver.getProductId()))
                {
                    JOptionPane.showMessageDialog(chargesDialog, "Waiver removed successfully.");
                    setWaiverTree();
                }
            }
        }
}//GEN-LAST:event_waiverButtonActionPerformed

    private void waiverTreeValueChanged(javax.swing.event.TreeSelectionEvent evt)//GEN-FIRST:event_waiverTreeValueChanged
    {//GEN-HEADEREND:event_waiverTreeValueChanged
        // TODO add your handling code here:
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) waiverTree.getLastSelectedPathComponent();
        if (selectedNode != null)
        {
            Long prodId = getWorker().convertToType(selectedNode.getUserObject().toString().split("~")[0], Long.class);
            if (!getWorker().isBlank(prodId))
            {
                displayWaiver(prodId);
            }
            else
            {
                acceptWaiver();
            }
        }
}//GEN-LAST:event_waiverTreeValueChanged

    private void valueFieldFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_valueFieldFocusLost
    {//GEN-HEADEREND:event_valueFieldFocusLost
        // TODO add your handling code here:
        String val = valueField.getText().trim();
        if (!getWorker().isBlank(val))
        {
            BigDecimal amount = getWorker().convertToType(valueField.getText().trim(), BigDecimal.class);
            if (!getWorker().validateAmount(amount, true))
            {
                valueField.requestFocus();
                valueField.selectAll();
            }
            if (!getWorker().isPositiveNumber(val))
            {
                valueField.requestFocus();
                valueField.selectAll();
            }
            else
            {
                val = getWorker().formatDecimal(new BigDecimal(val)).toPlainString();
                valueField.setText(val);
                if (chargeTypeBox.getSelectedIndex() == 0)
                {
                    minAmountField.setText(val);
                    maxAmountField.setText(val);
                }
            }
        }
    }//GEN-LAST:event_valueFieldFocusLost

    private void valueTreeValueChanged(javax.swing.event.TreeSelectionEvent evt)//GEN-FIRST:event_valueTreeValueChanged
    {//GEN-HEADEREND:event_valueTreeValueChanged
        // TODO add your handling code here:
        DefaultMutableTreeNode valueNode = (DefaultMutableTreeNode) valueTree.getLastSelectedPathComponent();
        if (valueNode != null)
        {
            displayValue(valueNode.getUserObject().toString().split("~")[0].trim());
        }
    }//GEN-LAST:event_valueTreeValueChanged

    private void waiverConditionBoxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_waiverConditionBoxItemStateChanged
    {//GEN-HEADEREND:event_waiverConditionBoxItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED)
        {
            thresholdField.setEditable(waiverConditionBox.getSelectedIndex() != 0);
            thresholdField.setText(waiverConditionBox.getSelectedIndex() != 0 ? thresholdField.getText().trim() : "0");
        }
    }//GEN-LAST:event_waiverConditionBoxItemStateChanged

    private void schemeBoxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_schemeBoxItemStateChanged
    {//GEN-HEADEREND:event_schemeBoxItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED)
        {
            setChargeTree();
        }
    }//GEN-LAST:event_schemeBoxItemStateChanged

    private void deductionButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deductionButtonActionPerformed
    {//GEN-HEADEREND:event_deductionButtonActionPerformed
        // TODO add your handling code here:
        boolean save = deductionButton.getText().equals("Save Deduction");
        if (save ? getWorker().validateFields(chargesDialog, deductionsPanel) : true)
        {
            if (save)
            {
                TCDeduction deduction = new TCDeduction();
                deduction.setRecId(Long.valueOf(getValue().getDeductions().size() + 1));
                deduction.setDescription(deductionDescriptionField.getText().trim());
                deduction.setAccount(getWorker().getBoxValue(deductionAccountBox));
                deduction.setBasis(getWorker().getBoxValue(deductionBasisBox));
                deduction.setValueType(getWorker().getBoxValue(deductionValueTypeBox));
                deduction.setValue(getWorker().convertToType(deductionValueField.getText(), BigDecimal.class));
                getValue().getDeductions().put(deduction.getRecId(), deduction);
                if (getValue().getDeductions().containsKey(deduction.getRecId()))
                {
                    JOptionPane.showMessageDialog(chargesDialog, "Deduction saved successfully.");
                    setDeductionTree();
                    getWorker().selectTreeNode(deductionTree, deduction);
                }
            }
            else
            {
                TCDeduction tCDeduction = getWorker().getSelectedObject(deductionTree, TCDeduction.class);
                getValue().getDeductions().remove(tCDeduction.getRecId());
                if (!getValue().getDeductions().containsKey(tCDeduction.getRecId()))
                {
                    JOptionPane.showMessageDialog(chargesDialog, "Deduction removed successfully.");
                    setDeductionTree();
                }
            }
        }
    }//GEN-LAST:event_deductionButtonActionPerformed

    private void deductionValueFieldFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_deductionValueFieldFocusLost
    {//GEN-HEADEREND:event_deductionValueFieldFocusLost
        if (!getWorker().isBlank(deductionValueField.getText()))
        {
            BigDecimal deductionValue = getWorker().convertToType(deductionValueField.getText().trim(), BigDecimal.class);
            if ("P".equals(getWorker().getBoxValue(deductionValueTypeBox)) && !getWorker().validatePercentage(deductionValue))
            {
                JOptionPane.showMessageDialog(chargesDialog, "Invalid deduction percentage [it must be a number between 0 and 100].");
                deductionValueField.requestFocus();
                deductionValueField.selectAll();
            }
            else if ("C".equals(getWorker().getBoxValue(deductionValueTypeBox)) && !getWorker().validateAmount(deductionValue, false))
            {
                JOptionPane.showMessageDialog(chargesDialog, "Invalid deduction amount [it must be a number greater than 0].");
                deductionValueField.requestFocus();
                deductionValueField.selectAll();
            }
            else
            {
                getWorker().formatDecimalValue(deductionValueField);
            }
        }
    }//GEN-LAST:event_deductionValueFieldFocusLost

    private void deductionTreeValueChanged(javax.swing.event.TreeSelectionEvent evt)//GEN-FIRST:event_deductionTreeValueChanged
    {//GEN-HEADEREND:event_deductionTreeValueChanged
        // TODO add your handling code here:
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) deductionTree.getLastSelectedPathComponent();
        if (selectedNode != null)
        {
            if (selectedNode.getUserObject() instanceof TCDeduction)
            {
                displayDeduction((TCDeduction) selectedNode.getUserObject());
            }
            else
            {
                acceptDeduction();
            }
        }
    }//GEN-LAST:event_deductionTreeValueChanged

    private void matchAccountBoxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_matchAccountBoxItemStateChanged
    {//GEN-HEADEREND:event_matchAccountBoxItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED)
        {
            matchLabel.setText("B".equals(getWorker().getBoxValue(matchAccountBox)) ? "Match" : "Matches");
        }
    }//GEN-LAST:event_matchAccountBoxItemStateChanged

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_copyButtonActionPerformed
    {//GEN-HEADEREND:event_copyButtonActionPerformed
        // TODO add your handling code here:
        if ((JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(chargesDialog, "Are you sure you want to create copy of this charge?", "Confirm Copy", JOptionPane.YES_NO_OPTION)))
        {
            try
            {
                AXCharge clone = (AXCharge) getCharge().clone();
                clone.setRecId(getdClient().nextChargeId());
                clone.setCode(getWorker().nextCode(getCharges()));
                if (getdClient().upsertCharge(clone))
                {
                    setChargeTree();
                    getWorker().selectTreeNode(chargeTree, clone);
                }
                else
                {
                    JOptionPane.showMessageDialog(chargesDialog, "Unable to copy charge! Please check log for details.", "Copy Error!", JOptionPane.ERROR_MESSAGE);
                }
            }
            catch (Exception ex)
            {
                APMain.acxLog.logEvent(ex);
            }
        }
    }//GEN-LAST:event_copyButtonActionPerformed

    private void codeFieldFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_codeFieldFocusLost
    {//GEN-HEADEREND:event_codeFieldFocusLost
        // TODO add your handling code here:
        getWorker().selectTreeNode(chargeTree, codeField.getText().trim());
    }//GEN-LAST:event_codeFieldFocusLost

    private void displayValue(String currency)
    {
        if (!getWorker().isBlank(getValue().getCurrency()))
        {
            updateValue();
        }
        setValue(getCharge().getValues().containsKey(currency) ? getCharge().getValues().get(currency) : new TCValue());
        getWorker().selectBoxValue(chargeTypeBox, getValue().getChargeType());
        valueField.setText(getValue().getValue().toPlainString());
        minAmountField.setText(getValue().getMinAmount().toPlainString());
        maxAmountField.setText(getValue().getMaxAmount().toPlainString());
        getValue().setCurrency(currency);
        setDeductionTree();
        setTierTree();
    }

    private void updateValue()
    {
        try
        {
            getValue().setChargeType(getWorker().getBoxValue(chargeTypeBox));
            getValue().setValue(getWorker().convertToType(valueField.getText().trim(), BigDecimal.class));
            getValue().setMinAmount(getWorker().convertToType(minAmountField.getText(), BigDecimal.class));
            getValue().setMaxAmount(getWorker().convertToType(maxAmountField.getText(), BigDecimal.class));
            getCharge().getValues().put(getValue().getCurrency(), getValue());
        }
        catch (Exception ex)
        {
            ex = null;
        }
    }

    private void acceptCharge()
    {
        setCharge(new AXCharge());
        setValue(new TCValue());
        getWorker().resetAllFields(this, schemeBox);
        getCharge().setCode(Objects.equals(ALController.channel, getChannel()) ? getWorker().nextCode(getCharges()) : "");

        codeField.setText(getCharge().getCode());
        copyButton.setEnabled(false);
        saveButton.setText("Save");
        setValueTree();
        setWaiverTree();
    }

    public void displayCharge(AXCharge charge)
    {
        setCharge(charge);
        setValue(getCharge().getValues().containsKey(APController.getCurrency().getCurrencyCode()) ? getCharge().getValues().get(APController.getCurrency().getCurrencyCode()) : new TCValue());
        codeField.setText(getCharge().getCode());
        descriptionField.setText(getCharge().getDescription());

        getWorker().selectBoxValue(chargeAccountBox, getCharge().getChargeAccount());
        chargeLedgerField.setText(getCharge().getChargeLedger());
        getWorker().selectBoxValue(statusBox, getCharge().getStatus());
        sysUserField.setText(getCharge().getSysUser());

        sysDateField.setText(new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss a").format(getCharge().getSysDate()));
        getWorker().selectBoxValue(chargeTypeBox, getValue().getChargeType());
        valueField.setText(getValue().getValue().toPlainString());
        minAmountField.setText(getValue().getMinAmount().toPlainString());

        maxAmountField.setText(getValue().getMaxAmount().toPlainString());
        saveButton.setText("Update");
        copyButton.setEnabled(true);
        setValueTree();
        setWaiverTree();
    }

    public void setValueTree()
    {
        DefaultMutableTreeNode rootNode = ((DefaultMutableTreeNode) valueTree.getModel().getRoot());
        rootNode.removeAllChildren();

        getdClient().queryCurrencies().stream().forEach((currency)
                -> 
                {
                    rootNode.add(new DefaultMutableTreeNode(new AXNode(currency.getCurrencyCode() + "~" + currency.getCurrencyName())));
        });
        getWorker().selectTreeNode(valueTree, APController.getCurrency().getCurrencyCode());
    }

    private void acceptTier()
    {
        getWorker().setAllFields(tierDisplayPanel, true);
        getWorker().resetAllFields(tierDisplayPanel);
        tierMinField.setEditable(false);
        tierButton.setText("Save Tier");
    }

    private void displayTier(AXTier tier)
    {
        getWorker().setAllFields(tierDisplayPanel, false);
        tierMaxField.setText(getWorker().formatDecimal(tier.getTierMax()).toPlainString());
        tierValueField.setText(getWorker().formatDecimal(tier.getValue()).toPlainString());
        tierMinField.setText(getTierFloor(tier.getTierMax()).toPlainString());
        tierButton.setText("Remove Tier");
    }

    public BigDecimal getTierFloor(BigDecimal tierCeiling)
    {
        BigDecimal floor = getWorker().formatDecimal(new BigDecimal(0.01));
        for (AXTier tier : getValue().getTiers().values())
        {
            floor = (tier.getTierMax().compareTo(floor) > 0 && tier.getTierMax().compareTo(tierCeiling) < 0) ? tier.getTierMax().add(new BigDecimal(0.01)) : floor;
        }
        return getWorker().formatDecimal(floor);
    }

    private void setTierFloors()
    {
        if (!getWorker().isBlank(getCharge().getCode()))
        {
            BigDecimal floor = getWorker().formatDecimal(new BigDecimal(0.01));
            for (AXTier tier : getWorker().sortArray(getValue().getTiers().values().toArray(new AXTier[getValue().getTiers().size()]), true))
            {
                tier.setTierMin(floor);
                getValue().getTiers().put(tier.getTierMax(), tier);
                floor = tier.getTierMax().add(getWorker().formatDecimal(new BigDecimal(0.01)));
            }
        }
    }

    private void acceptDeduction()
    {
        getWorker().setAllFields(deductionDisplayPanel, true);
        getWorker().resetAllFields(deductionDisplayPanel);
        deductionButton.setText("Save Deduction");
    }

    private void displayDeduction(TCDeduction deduction)
    {
        getWorker().setAllFields(deductionDisplayPanel, false);
        getWorker().selectBoxValue(deductionBasisBox, deduction.getBasis());
        deductionDescriptionField.setText(deduction.getDescription());
        getWorker().selectBoxValue(deductionAccountBox, deduction.getAccount());
        getWorker().selectBoxValue(deductionValueTypeBox, deduction.getValueType());
        deductionValueField.setText(deduction.getValue().toPlainString());
        deductionButton.setText("Remove Deduction");
    }

    public void setDeductionTree()
    {
        deductionAccountBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]
        {
            "", "AA~Agent Account"
        }));
        DefaultMutableTreeNode rootNode = ((DefaultMutableTreeNode) deductionTree.getModel().getRoot());
        rootNode.removeAllChildren();

        rootNode.add(new DefaultMutableTreeNode("Add Deduction"));
        for (TCDeduction deduction : getWorker().sortArray(getValue().getDeductions().values().toArray(new TCDeduction[0]), true))
        {
            rootNode.add(new DefaultMutableTreeNode(deduction));
        }
        getWorker().expandAllNodes(deductionTree, TCDeduction.class);
    }

    public void setTierTree()
    {
        DefaultMutableTreeNode rootNode = ((DefaultMutableTreeNode) tierTree.getModel().getRoot());
        rootNode.removeAllChildren();

        rootNode.add(new DefaultMutableTreeNode("Add Tier"));
        setTierFloors();

        for (AXTier tier : getWorker().sortArray(getValue().getTiers().values().toArray(new AXTier[0]), true))
        {
            rootNode.add(new DefaultMutableTreeNode(tier));
        }
        setTiersPanel();
        getWorker().expandAllNodes(tierTree, AXTier.class);
    }

    private void setTiersPanel()
    {

        tierTree.setEnabled(Objects.equals(getWorker().getBoxValue(chargeTypeBox), "T"));
        for (Component c : tierDisplayPanel.getComponents())
        {
            if (!(c instanceof JLabel))
            {
                c.setEnabled(tierTree.isEnabled());
                if (c instanceof JTextField)
                {
                    ((JTextField) c).setText("");
                }
            }
        }
    }

    public void setWaiverTree()
    {
        populateWaiverProductsBox(false);
        DefaultMutableTreeNode rootNode = ((DefaultMutableTreeNode) waiverTree.getModel().getRoot());

        rootNode.removeAllChildren();
        rootNode.add(new DefaultMutableTreeNode("Add Waiver"));

        HashMap<Long, TCWaiver> waiversMap = getCharge().getWaivers();
        for (Object productId : getWorker().sortArray(waiversMap.keySet().toArray(), true))
        {
            rootNode.add(new DefaultMutableTreeNode(new AXNode(productId + "~[" + waiversMap.get(productId).getWaivedPercentage().toPlainString() + "%] " + (!"0".equals(String.valueOf(productId)) ? getdClient().queryProducts(Integer.valueOf(String.valueOf(productId)))[0][1].toString() : "All Products"))));
        }
        getWorker().expandAllNodes(waiverTree, AXNode.class);
    }

    private void acceptWaiver()
    {
        populateWaiverProductsBox(false);
        getWorker().setAllFields(waiverDisplayPanel, true);
        getWorker().resetAllFields(waiverDisplayPanel);
        waiverButton.setText("Save Waiver");
    }

    private void displayWaiver(Long prodId)
    {
        TCWaiver waiver = getCharge().getWaivers().get(prodId);
        getWorker().setAllFields(waiverDisplayPanel, false);
        getWorker().selectBoxValue(waiverProductBox, String.valueOf(waiver.getProductId()));
        waivedPercentageField.setText(waiver.getWaivedPercentage().toPlainString());
        thresholdField.setText(waiver.getThresholdValue().toPlainString());
        getWorker().selectBoxValue(matchAccountBox, waiver.getMatchAccount());
        getWorker().selectBoxValue(waiverConditionBox, waiver.getWaiverCondition());
        waiverButton.setText("Remove Waiver");
    }

    private void populateWaiverProductsBox(boolean all)
    {
        waiverProductBox.removeAllItems();
        waiverProductBox.addItem("---select---");
        waiverProductBox.addItem("0 ~ All Products");
        for (Object[] product : getdClient().queryProducts())
        {
            if (all || !charge.getWaivers().containsKey(product[0]))
            {
                waiverProductBox.addItem(product[0] + " ~ " + product[1]);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox chargeAccountBox;
    private javax.swing.JTextField chargeLedgerField;
    private javax.swing.JTree chargeTree;
    private javax.swing.JScrollPane chargeTreeScroller;
    private javax.swing.JComboBox chargeTypeBox;
    public javax.swing.JDialog chargesDialog;
    private javax.swing.JTextField codeField;
    private javax.swing.JButton copyButton;
    private javax.swing.JComboBox<String> deductionAccountBox;
    private javax.swing.JComboBox<String> deductionBasisBox;
    private javax.swing.JButton deductionButton;
    private javax.swing.JTextField deductionDescriptionField;
    private javax.swing.JPanel deductionDisplayPanel;
    private javax.swing.JTree deductionTree;
    private javax.swing.JScrollPane deductionTreeScroller;
    private javax.swing.JTextField deductionValueField;
    private javax.swing.JComboBox<String> deductionValueTypeBox;
    private javax.swing.JPanel deductionsPanel;
    private javax.swing.JTextField descriptionField;
    private javax.swing.JPanel detailsPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JComboBox matchAccountBox;
    private javax.swing.JLabel matchLabel;
    private javax.swing.JTextField maxAmountField;
    private javax.swing.JTextField minAmountField;
    private javax.swing.JButton saveButton;
    private javax.swing.JComboBox<String> schemeBox;
    private javax.swing.JComboBox statusBox;
    private javax.swing.JTextField sysDateField;
    private javax.swing.JTextField sysUserField;
    private javax.swing.JTextField thresholdField;
    private javax.swing.JButton tierButton;
    private javax.swing.JPanel tierDisplayPanel;
    private javax.swing.JTextField tierMaxField;
    private javax.swing.JTextField tierMinField;
    private javax.swing.JTree tierTree;
    private javax.swing.JScrollPane tierTreeScroller;
    private javax.swing.JTextField tierValueField;
    private javax.swing.JPanel tiersPanel;
    private javax.swing.JTextField valueField;
    private javax.swing.JLabel valueLabel;
    private javax.swing.JPanel valuePanel;
    private javax.swing.JTree valueTree;
    private javax.swing.JScrollPane valueTreeScroller;
    private javax.swing.JTextField waivedPercentageField;
    private javax.swing.JButton waiverButton;
    private javax.swing.JComboBox<String> waiverConditionBox;
    private javax.swing.JPanel waiverDisplayPanel;
    private javax.swing.JComboBox waiverProductBox;
    private javax.swing.JTree waiverTree;
    private javax.swing.JScrollPane waiverTreeScroller;
    private javax.swing.JPanel waiversPanel;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the charge
     */
    public AXCharge getCharge()
    {
        return charge;
    }

    /**
     * @param charge the charge to set
     */
    public void setCharge(AXCharge charge)
    {
        this.charge = charge;
    }

    /**
     * @return the value
     */
    public TCValue getValue()
    {
        return value;
    }

    /**
     * @param value the value to set
     */
    public void setValue(TCValue value)
    {
        this.value = value;
    }

    /**
     * @return the charges
     */
    public TreeMap<String, AXCharge> getCharges()
    {
        return charges;
    }

    /**
     * @param charges the charges to set
     */
    public void setCharges(TreeMap<String, AXCharge> charges)
    {
        this.charges = charges;
    }

    /**
     * @return the channel
     */
    public String getChannel()
    {
        return channel;
    }

    /**
     * @param channel the channel to set
     */
    public void setChannel(String channel)
    {
        this.channel = channel;
    }

    /**
     * @return the box
     */
    public static ATBox getBox()
    {
        return box;
    }

    private AXWorker getWorker()
    {
        return getBox().getWorker();
    }

    private DBClient getdClient()
    {
        return getBox().getdClient();
    }
}
