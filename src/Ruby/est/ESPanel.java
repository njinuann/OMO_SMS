/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ruby.est;

import Ruby.APMain;
import Ruby.DBClient;
import Ruby.acx.AFPanel;
import Ruby.acx.ATBox;
import Ruby.acx.AXWorker;
import Ruby.acx.TRenderer;
import Ruby.model.AXCharge;
import Ruby.model.ESTask;
import com.toedter.calendar.JDateChooser;
import java.awt.EventQueue;
import java.awt.HeadlessException;
import java.awt.event.ItemEvent;
import java.util.Date;
import java.util.Objects;
import java.util.TreeMap;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;

/**
 *
 * @author Pecherk
 */
public final class ESPanel extends javax.swing.JPanel
{
    private ESTask task = new ESTask();
    private boolean fireFilterEvent = true;
    private final ATBox box = new ATBox(APMain.acxLog);
    private TreeMap<String, ESTask> tasks = new TreeMap<>();

    /**
     * Creates new form MXPanel
     */
    public ESPanel()
    {
        initComponents();
        initDialog();
    }

    public void initDialog()
    {
        taskDialog.setIconImage(APMain.getIconImage());
        taskDialog.setContentPane(this);
        taskDialog.pack();
        taskDialog.setResizable(false);
        taskDialog.setLocationRelativeTo(APMain.apFrame);

        configureDateChooser(nextDateChooser);
        configureDateChooser(previousDateChooser);
        configureDateChooser(expiryDateChooser);
        nextDateChooser.setMinSelectableDate(getClient().getSystemDate());
        expiryDateChooser.setMinSelectableDate(getClient().getSystemDate());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        filterByBox = new javax.swing.JComboBox();
        checkFilterDialog = new javax.swing.JDialog();
        selectedNodesPanel = new javax.swing.JPanel();
        selectedNodesAreaScroller = new javax.swing.JScrollPane();
        selectedNodesArea = new javax.swing.JTextArea();
        jSeparator5 = new javax.swing.JSeparator();
        cancelCheckFilterButton = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JSeparator();
        applyCheckFilterButton = new javax.swing.JButton();
        filterTreePanel = new javax.swing.JPanel();
        filterTreeScroller = new javax.swing.JScrollPane();
        filterTree = new Ruby.est.ESTree(this);
        filterScroller = new javax.swing.JScrollPane();
        filterTextArea = new javax.swing.JTextArea();
        csvFilterDialog = new javax.swing.JDialog();
        csvFilterItemsPanel = new javax.swing.JPanel();
        csvFilterItemsAreaScroller = new javax.swing.JScrollPane();
        csvFilterTextArea = new javax.swing.JTextArea();
        jSeparator8 = new javax.swing.JSeparator();
        cancelCSVFilterButton = new javax.swing.JButton();
        jSeparator9 = new javax.swing.JSeparator();
        applyCSVFilterButton = new javax.swing.JButton();
        taskDialog = new javax.swing.JDialog();
        taskTreeScroller = new javax.swing.JScrollPane();
        taskTree = new javax.swing.JTree();
        jSeparator1 = new javax.swing.JSeparator();
        saveButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        closeButton = new javax.swing.JButton();
        executeButton = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        deleteButton = new javax.swing.JButton();
        detailsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        codeField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        descriptionField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        documentBox = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        chargeBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        rangeBox = new javax.swing.JComboBox<>();
        filtersPanel = new javax.swing.JPanel();
        rfPanel = new AFPanel(filterByBox, filterScroller);
        executionPanel = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        runTimeBox = new javax.swing.JComboBox();
        nextDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        statusBox = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        expiryDateChooser = new com.toedter.calendar.JDateChooser();
        previousDateChooser = new com.toedter.calendar.JDateChooser();
        cycleBox = new javax.swing.JComboBox<>();
        copyButton = new javax.swing.JButton();
        jSeparator10 = new javax.swing.JSeparator();

        filterByBox.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        filterByBox.setForeground(new java.awt.Color(0, 102, 102));
        filterByBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---select filter---", "AN~Account Number", "AP~Account Product", "AC~Account Cycle" }));
        filterByBox.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                filterByBoxItemStateChanged(evt);
            }
        });

        checkFilterDialog.setTitle("Filters");
        checkFilterDialog.setAlwaysOnTop(true);
        checkFilterDialog.setIconImage(null);
        checkFilterDialog.setModal(true);
        checkFilterDialog.addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                checkFilterDialogWindowClosing(evt);
            }
        });

        selectedNodesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "Selected Items"));

        selectedNodesArea.setEditable(false);
        selectedNodesArea.setColumns(20);
        selectedNodesArea.setRows(5);
        selectedNodesArea.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        selectedNodesAreaScroller.setViewportView(selectedNodesArea);

        javax.swing.GroupLayout selectedNodesPanelLayout = new javax.swing.GroupLayout(selectedNodesPanel);
        selectedNodesPanel.setLayout(selectedNodesPanelLayout);
        selectedNodesPanelLayout.setHorizontalGroup(
            selectedNodesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectedNodesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selectedNodesAreaScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                .addContainerGap())
        );
        selectedNodesPanelLayout.setVerticalGroup(
            selectedNodesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, selectedNodesPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(selectedNodesAreaScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                .addContainerGap())
        );

        cancelCheckFilterButton.setText("Cancel");
        cancelCheckFilterButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cancelCheckFilterButtonActionPerformed(evt);
            }
        });

        jSeparator6.setOrientation(javax.swing.SwingConstants.VERTICAL);

        applyCheckFilterButton.setText("Apply");
        applyCheckFilterButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                applyCheckFilterButtonActionPerformed(evt);
            }
        });

        filterTreePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "Available Items"));

        filterTreeScroller.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray));

        filterTree.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Filters");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Item 1");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Item 2");
        treeNode1.add(treeNode2);
        filterTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        filterTreeScroller.setViewportView(filterTree);

        javax.swing.GroupLayout filterTreePanelLayout = new javax.swing.GroupLayout(filterTreePanel);
        filterTreePanel.setLayout(filterTreePanelLayout);
        filterTreePanelLayout.setHorizontalGroup(
            filterTreePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterTreePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filterTreeScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                .addContainerGap())
        );
        filterTreePanelLayout.setVerticalGroup(
            filterTreePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, filterTreePanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(filterTreeScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout checkFilterDialogLayout = new javax.swing.GroupLayout(checkFilterDialog.getContentPane());
        checkFilterDialog.getContentPane().setLayout(checkFilterDialogLayout);
        checkFilterDialogLayout.setHorizontalGroup(
            checkFilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(checkFilterDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(checkFilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator5)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, checkFilterDialogLayout.createSequentialGroup()
                        .addComponent(applyCheckFilterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelCheckFilterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, checkFilterDialogLayout.createSequentialGroup()
                        .addComponent(filterTreePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectedNodesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        checkFilterDialogLayout.setVerticalGroup(
            checkFilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(checkFilterDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(checkFilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectedNodesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(filterTreePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(checkFilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jSeparator6, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cancelCheckFilterButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(applyCheckFilterButton))
                .addContainerGap())
        );

        checkFilterDialog.pack();
        checkFilterDialog.setLocationRelativeTo(null);

        filterTextArea.setEditable(false);
        filterTextArea.setColumns(20);
        filterTextArea.setForeground(new java.awt.Color(51, 102, 255));
        filterTextArea.setLineWrap(true);
        filterTextArea.setRows(5);
        filterTextArea.setWrapStyleWord(true);
        filterScroller.setViewportView(filterTextArea);

        csvFilterDialog.setTitle("Filters");
        csvFilterDialog.setAlwaysOnTop(true);
        csvFilterDialog.setIconImage(null);
        csvFilterDialog.setModal(true);
        csvFilterDialog.addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                csvFilterDialogWindowClosing(evt);
            }
        });

        csvFilterItemsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "CSV Match Items"));

        csvFilterTextArea.setColumns(20);
        csvFilterTextArea.setRows(5);
        csvFilterItemsAreaScroller.setViewportView(csvFilterTextArea);

        javax.swing.GroupLayout csvFilterItemsPanelLayout = new javax.swing.GroupLayout(csvFilterItemsPanel);
        csvFilterItemsPanel.setLayout(csvFilterItemsPanelLayout);
        csvFilterItemsPanelLayout.setHorizontalGroup(
            csvFilterItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(csvFilterItemsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(csvFilterItemsAreaScroller)
                .addContainerGap())
        );
        csvFilterItemsPanelLayout.setVerticalGroup(
            csvFilterItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, csvFilterItemsPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(csvFilterItemsAreaScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                .addContainerGap())
        );

        cancelCSVFilterButton.setText("Cancel");
        cancelCSVFilterButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cancelCSVFilterButtonActionPerformed(evt);
            }
        });

        jSeparator9.setOrientation(javax.swing.SwingConstants.VERTICAL);

        applyCSVFilterButton.setText("Apply");
        applyCSVFilterButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                applyCSVFilterButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout csvFilterDialogLayout = new javax.swing.GroupLayout(csvFilterDialog.getContentPane());
        csvFilterDialog.getContentPane().setLayout(csvFilterDialogLayout);
        csvFilterDialogLayout.setHorizontalGroup(
            csvFilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(csvFilterDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(csvFilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator8, javax.swing.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, csvFilterDialogLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(applyCSVFilterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelCSVFilterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(csvFilterItemsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        csvFilterDialogLayout.setVerticalGroup(
            csvFilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(csvFilterDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(csvFilterItemsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(csvFilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jSeparator9, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cancelCSVFilterButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(applyCSVFilterButton))
                .addContainerGap())
        );

        csvFilterDialog.pack();
        csvFilterDialog.setLocationRelativeTo(null);

        taskDialog.setTitle("Ruby Tasks");
        taskDialog.setIconImage(Ruby.APMain.getIconImage());
        taskDialog.setModal(true);
        taskDialog.setName("taskDialog"); // NOI18N

        javax.swing.GroupLayout taskDialogLayout = new javax.swing.GroupLayout(taskDialog.getContentPane());
        taskDialog.getContentPane().setLayout(taskDialogLayout);
        taskDialogLayout.setHorizontalGroup(
            taskDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        taskDialogLayout.setVerticalGroup(
            taskDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        taskTreeScroller.setBorder(null);

        taskTree.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Tasks");
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Add Task");
        treeNode1.add(treeNode2);
        taskTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        taskTree.setAutoscrolls(true);
        taskTree.setCellRenderer(new TRenderer());
        taskTree.setRootVisible(false);
        taskTree.setShowsRootHandles(true);
        taskTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener()
        {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt)
            {
                taskTreeValueChanged(evt);
            }
        });
        taskTreeScroller.setViewportView(taskTree);

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                saveButtonActionPerformed(evt);
            }
        });

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                closeButtonActionPerformed(evt);
            }
        });

        executeButton.setText("Execute");
        executeButton.setEnabled(false);
        executeButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                executeButtonActionPerformed(evt);
            }
        });

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);

        deleteButton.setText("Delete");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                deleteButtonActionPerformed(evt);
            }
        });

        detailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "Task Details"));

        jLabel1.setText("Task Code");

        codeField.setEditable(false);
        codeField.setForeground(new java.awt.Color(51, 102, 255));
        codeField.setToolTipText("Task Code");

        jLabel2.setText("Description");

        descriptionField.setForeground(new java.awt.Color(51, 102, 255));
        descriptionField.setToolTipText("Task Description");

        jLabel3.setText("Document");

        documentBox.setForeground(new java.awt.Color(51, 102, 255));
        documentBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "LP~Locked PDF", "UP~Unlocked PDF" }));
        documentBox.setToolTipText("Document");

        jLabel14.setText("Charge");

        chargeBox.setForeground(new java.awt.Color(51, 102, 255));
        chargeBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        chargeBox.setToolTipText("Task Charge");

        jLabel4.setText("Txns Range");

        rangeBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "D~Last One Day", "W~Last One Week", "M~Last One Month", "Q~Last Quarter", "Y~Last One Year" }));

        javax.swing.GroupLayout detailsPanelLayout = new javax.swing.GroupLayout(detailsPanel);
        detailsPanel.setLayout(detailsPanelLayout);
        detailsPanelLayout.setHorizontalGroup(
            detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(detailsPanelLayout.createSequentialGroup()
                        .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(documentBox, 0, 161, Short.MAX_VALUE)
                            .addComponent(codeField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(descriptionField)
                            .addComponent(rangeBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(chargeBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        detailsPanelLayout.setVerticalGroup(
            detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailsPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(codeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(descriptionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(documentBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(rangeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(chargeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        filtersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "Recipients Filter (CSV)"));

        rfPanel.setForeground(new java.awt.Color(51, 102, 255));

        javax.swing.GroupLayout rfPanelLayout = new javax.swing.GroupLayout(rfPanel);
        rfPanel.setLayout(rfPanelLayout);
        rfPanelLayout.setHorizontalGroup(
            rfPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        rfPanelLayout.setVerticalGroup(
            rfPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 49, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout filtersPanelLayout = new javax.swing.GroupLayout(filtersPanel);
        filtersPanel.setLayout(filtersPanelLayout);
        filtersPanelLayout.setHorizontalGroup(
            filtersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filtersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rfPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        filtersPanelLayout.setVerticalGroup(
            filtersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filtersPanelLayout.createSequentialGroup()
                .addComponent(rfPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        executionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "Task Execution"));

        jLabel16.setText("Run Time");

        runTimeBox.setForeground(new java.awt.Color(51, 102, 255));
        runTimeBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---select---", "A~Any Time", "M~Morning", "F~Afternoon", "E~Evening", "N~Night" }));
        runTimeBox.setToolTipText("Run Time");

        nextDateChooser.setToolTipText("Next Date");
        nextDateChooser.setDateFormatString("dd-MMM-yyyy");

        jLabel6.setText("Next Date");

        jLabel5.setText("Task Cycle");

        jLabel9.setText("Task Status");

        statusBox.setForeground(new java.awt.Color(51, 102, 255));
        statusBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "A~Active", "C~Closed", "E~Expired" }));
        statusBox.setToolTipText("Task Status");

        jLabel10.setText("Expiry Date");

        jLabel8.setText("Previous Date");

        expiryDateChooser.setToolTipText("Expiry Date");
        expiryDateChooser.setDateFormatString("dd-MMM-yyyy");

        previousDateChooser.setToolTipText("Previous Date");
        previousDateChooser.setDateFormatString("dd-MMM-yyyy");
        previousDateChooser.setEnabled(false);

        cycleBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---select---", "D~Daily Statement", "W~Weekly Statement", "M~Monthly Statement", "Q~Quarterly Statement", "A~Annual Statement", "O~One-Off Statement" }));
        cycleBox.setToolTipText("Task Cycle");

        javax.swing.GroupLayout executionPanelLayout = new javax.swing.GroupLayout(executionPanel);
        executionPanel.setLayout(executionPanelLayout);
        executionPanelLayout.setHorizontalGroup(
            executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(executionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel16))
                .addGap(7, 7, 7)
                .addGroup(executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(runTimeBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(statusBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cycleBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(previousDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(expiryDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nextDateChooser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        executionPanelLayout.setVerticalGroup(
            executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(executionPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(nextDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel16)
                        .addComponent(runTimeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(cycleBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8))
                    .addComponent(previousDateChooser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(statusBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10))
                    .addComponent(expiryDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        copyButton.setText("Copy");
        copyButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                copyButtonActionPerformed(evt);
            }
        });

        jSeparator10.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(taskTreeScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(executeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator10, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(copyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(detailsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(filtersPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(executionPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 555, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(detailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(executionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filtersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSeparator2)
                            .addComponent(closeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(executeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(deleteButton)
                                .addComponent(saveButton)
                                .addComponent(copyButton))
                            .addComponent(jSeparator10)))
                    .addComponent(taskTreeScroller))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void taskTreeValueChanged(javax.swing.event.TreeSelectionEvent evt)//GEN-FIRST:event_taskTreeValueChanged
    {//GEN-HEADEREND:event_taskTreeValueChanged
        // TODO add your handling code here:
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) taskTree.getLastSelectedPathComponent();
        if (selectedNode != null)
        {
            if (selectedNode.getUserObject() instanceof ESTask)
            {
                displayTask((ESTask) selectedNode.getUserObject());
            }
            else
            {
                acceptTask();
            }
        }
    }//GEN-LAST:event_taskTreeValueChanged

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveButtonActionPerformed
    {//GEN-HEADEREND:event_saveButtonActionPerformed
        // TODO add your handling code here:
        if (getWorker().validateFields(taskDialog, this, filtersPanel) && validateFilters())
        {
            getTask().setCode(codeField.getText());
            getTask().setDocument(getWorker().getBoxValue(documentBox));
            getTask().setRange(getWorker().getBoxValue(rangeBox));
            getTask().setDescription(descriptionField.getText());
            getTask().setCharge(getWorker().getBoxValue(chargeBox));
            getTask().setRunTime(getWorker().getBoxValue(runTimeBox));
            getTask().setExpiryDate(expiryDateChooser.getDate());
            getTask().setFilterBy(getWorker().getBoxValue(filterByBox));
            getTask().setFilters(getWorker().createArrayList(filterTextArea.getText()));
            getTask().setCycle(getWorker().getBoxValue(cycleBox));
            getTask().setPreviousDate(previousDateChooser.getDate());
            getTask().setNextDate(nextDateChooser.getDate());
            getTask().setStatus(getWorker().getBoxValue(statusBox));

            boolean proceed = getTasks().containsKey(getTask().getCode())
                    ? (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(taskDialog, "Are you sure you want to save changes to this task?", "Confirm Update", JOptionPane.YES_NO_OPTION))
                    : (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(taskDialog, "Are you sure you want to save this new task?", "Confirm Save", JOptionPane.YES_NO_OPTION));
            if (proceed)
            {
                getTasks().put(getTask().getCode(), getTask());
                if (getClient().upsertTask(getTask()))
                {
                    JOptionPane.showMessageDialog(taskDialog, "Task saved successfully.");
                    setTaskTree();
                }
                else
                {
                    JOptionPane.showMessageDialog(taskDialog, "Unable to save task!", "Saving Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_closeButtonActionPerformed
    {//GEN-HEADEREND:event_closeButtonActionPerformed
        // TODO add your handling code here:
        taskDialog.setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void executeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_executeButtonActionPerformed
    {//GEN-HEADEREND:event_executeButtonActionPerformed
        // TODO add your handling code here:
        if (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(taskDialog, "Are you sure you want to execute this task?", "Confirm Execute", JOptionPane.YES_NO_OPTION))
        {
            Date currentDate = getClient().getProcessingDate();
            getTask().setExpiryDate(currentDate.after(getTask().getExpiryDate()) ? currentDate : getTask().getExpiryDate());
            getTask().setNextDate(getClient().getSystemDate());
            getTask().setStatus("A");
            getTasks().put(getTask().getCode(), getTask());
            getClient().upsertTask(getTask());
            setTaskTree();
        }
    }//GEN-LAST:event_executeButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
    {//GEN-HEADEREND:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        if (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(taskDialog, "Are you sure you want to delete this task?", "Confirm Delete", JOptionPane.YES_NO_OPTION))
        {
            if (getClient().deleteTask(getTask()))
            {
                getTasks().remove(codeField.getText());
            }
            if (!getTasks().containsKey(codeField.getText()))
            {
                setTaskTree();
                JOptionPane.showMessageDialog(taskDialog, "Task deleted successfully.");
            }
            else
            {
                JOptionPane.showMessageDialog(taskDialog, "Unable to delete task!", "Deletion Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void filterByBoxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_filterByBoxItemStateChanged
    {//GEN-HEADEREND:event_filterByBoxItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED)
        {
            String filterBy = getWorker().getBoxValue(filterByBox);
            if (fireFilterEvent && !getWorker().isBlank(filterBy))
            {
                if (Objects.equals(filterBy, "AC"))
                {
                    filterTextArea.setText("");
                }
                else
                {
                    showFilterDialog();
                }
            }
        }
    }//GEN-LAST:event_filterByBoxItemStateChanged

    public void showDialog()
    {
        setChargeBox();
        setTaskTree();
        taskDialog.setVisible(true);
    }

    private void cancelCheckFilterButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelCheckFilterButtonActionPerformed
    {//GEN-HEADEREND:event_cancelCheckFilterButtonActionPerformed
        checkFilterDialog.setVisible(false);
        setFilters();
    }//GEN-LAST:event_cancelCheckFilterButtonActionPerformed

    public void setFilters()
    {
        fireFilterEvent = false;
        filterTextArea.setText(getWorker().createCsvList(getTask().getFilters()));
        if (!getWorker().isBlank(getTask().getFilterBy()))
        {
            getWorker().selectBoxValue(filterByBox, getTask().getFilterBy());
        }
        filterTextArea.requestFocus();
        fireFilterEvent = true;
    }

    private void configureDateChooser(JDateChooser dateChooser)
    {
        ((JTextField) dateChooser.getDateEditor()).setEditable(false);
        ((JTextField) dateChooser.getDateEditor()).setForeground(new java.awt.Color(51, 102, 255));
        ((JTextField) dateChooser.getDateEditor()).setDisabledTextColor(new java.awt.Color(51, 102, 255));
    }

    public void showFilterDialog()
    {
        EventQueue.invokeLater(()
                -> 
                {
                    String filterBy = getWorker().getBoxValue(filterByBox);
                    if ("AP".equals(filterBy) || "BU".equals(filterBy) || "CS".equals(filterBy) || "CT".equals(filterBy))
                    {
                        ((ESTree) filterTree).setmXPanel(ESPanel.this);
                        checkFilterDialog.setIconImage(APMain.getIconImage());
                        switch (filterBy)
                        {
                            case "AP":
                                ((ESTree) filterTree).setFilterTree(getClient().queryDepositProducts(), ("AP".equals(getTask().getFilterBy()) ? getTask().getFilters().toArray(new String[0]) : new String[0]), "All Products");
                                break;
                            case "BU":
                                ((ESTree) filterTree).setFilterTree(getClient().queryBranches(), ("BU".equals(getTask().getFilterBy()) ? getTask().getFilters().toArray(new String[0]) : new String[0]), "Business Units");
                                break;
                            case "CS":
                                ((ESTree) filterTree).setFilterTree(getClient().queryChannelSchemes(), ("CS".equals(getTask().getFilterBy()) ? getTask().getFilters().toArray(new String[0]) : new String[0]), "Channel Schemes");
                                break;
                            case "CT":
                                ((ESTree) filterTree).setFilterTree(getClient().queryCustomerTypes(), ("CT".equals(getTask().getFilterBy()) ? getTask().getFilters().toArray(new String[0]) : new String[0]), "Customer Types");
                                break;
                        }
                        filterTree.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
                        checkFilterDialog.setVisible(true);
                    }
                    else
                    {
                        csvFilterDialog.setIconImage(APMain.getIconImage());
                        csvFilterTextArea.setText(filterBy.equals(getTask().getFilterBy()) ? getWorker().createCsvList(getTask().getFilters()) : "");
                        csvFilterDialog.setVisible(true);
                    }
        });
    }

    private void applyCheckFilterButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_applyCheckFilterButtonActionPerformed
    {//GEN-HEADEREND:event_applyCheckFilterButtonActionPerformed
        // TODO add your handling code here:
        StringBuilder buffer = new StringBuilder();
        for (TreePath treePath : (((ESTree) filterTree).getCheckedPaths()))
        {
            DefaultMutableTreeNode node = ((DefaultMutableTreeNode) treePath.getLastPathComponent());
            if (node.isLeaf())
            {
                buffer.append(buffer.length() > 0 ? "," + node.getUserObject().toString().split("~")[0].trim() : node.getUserObject().toString().split("~")[0].trim());
            }
        }
        filterTextArea.setText(buffer.toString());
        checkFilterDialog.setVisible(false);
    }//GEN-LAST:event_applyCheckFilterButtonActionPerformed

    private void cancelCSVFilterButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelCSVFilterButtonActionPerformed
    {//GEN-HEADEREND:event_cancelCSVFilterButtonActionPerformed
        // TODO add your handling code here:
        csvFilterDialog.setVisible(false);
        setFilters();
    }//GEN-LAST:event_cancelCSVFilterButtonActionPerformed

    private void applyCSVFilterButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_applyCSVFilterButtonActionPerformed
    {//GEN-HEADEREND:event_applyCSVFilterButtonActionPerformed
        // TODO add your handling code here:
        StringBuilder buffer = new StringBuilder();
        for (String item : csvFilterTextArea.getText().split(","))
        {
            buffer.append(buffer.length() > 0 ? "," : "").append(item);
        }
        filterTextArea.setText(buffer.toString());
        csvFilterDialog.setVisible(false);
    }//GEN-LAST:event_applyCSVFilterButtonActionPerformed

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_copyButtonActionPerformed
    {//GEN-HEADEREND:event_copyButtonActionPerformed
        // TODO add your handling code here:
        if ((JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(taskDialog, "Are you sure you want to create copy of this task?", "Confirm Copy", JOptionPane.YES_NO_OPTION)))
        {
            try
            {
                ESTask clone = (ESTask) getTask().clone();
                clone.setCode(getWorker().nextCode(getTasks(), "S"));
                if (getClient().upsertTask(clone))
                {
                    setTaskTree();
                    getWorker().selectTreeNode(taskTree, clone);
                }
                else
                {
                    JOptionPane.showMessageDialog(taskDialog, "Unable to copy task! Please check tasks log for details.", "Copy Error!", JOptionPane.ERROR_MESSAGE);
                }
            }
            catch (Exception ex)
            {
                APMain.acxLog.logEvent(ex);
            }
        }
    }//GEN-LAST:event_copyButtonActionPerformed

    private void checkFilterDialogWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_checkFilterDialogWindowClosing
    {//GEN-HEADEREND:event_checkFilterDialogWindowClosing
        // TODO add your handling code here:
        setFilters();
    }//GEN-LAST:event_checkFilterDialogWindowClosing

    private void csvFilterDialogWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_csvFilterDialogWindowClosing
    {//GEN-HEADEREND:event_csvFilterDialogWindowClosing
        // TODO add your handling code here:
        setFilters();
    }//GEN-LAST:event_csvFilterDialogWindowClosing

    public void setTaskTree()
    {
        setTasks(getClient().queryTasks());
        DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode) taskTree.getModel().getRoot();

        rootNode.removeAllChildren();
        rootNode.add(new DefaultMutableTreeNode("Add Task"));

        getTasks().values().stream().forEach((mXTask)
                -> 
                {
                    rootNode.add(new DefaultMutableTreeNode(mXTask));
        });

        getWorker().expandAllNodes(taskTree, ESTask.class);
    }

    private void displayTask(ESTask task)
    {
        setTask(task);
        codeField.setText(getTask().getCode());
        getWorker().selectBoxValue(documentBox, getTask().getDocument());

        getWorker().selectBoxValue(rangeBox, getTask().getRange());
        getWorker().selectBoxValue(chargeBox, getTask().getCharge());
        getWorker().selectBoxValue(cycleBox, getTask().getCycle());

        getWorker().selectBoxValue(runTimeBox, getTask().getRunTime());
        descriptionField.setText(getTask().getDescription());
        expiryDateChooser.setDate(getTask().getExpiryDate());

        previousDateChooser.setDate(getTask().getPreviousDate());
        nextDateChooser.setDate(getTask().getNextDate());
        getWorker().selectBoxValue(statusBox, getTask().getStatus());

        executeButton.setEnabled(true);
        deleteButton.setEnabled(true);
        copyButton.setEnabled(true);
        setFilters();
    }

    private void setChargeBox()
    {
        chargeBox.removeAllItems();
        chargeBox.addItem("---select---");
        TreeMap<String, AXCharge> charges = getClient().queryCharges(ESController.chargeScheme);

        charges.keySet().stream().forEach((chargeCode)
                -> 
                {
                    chargeBox.addItem(chargeCode + "~" + charges.get(chargeCode).getDescription());
        });
    }

    private boolean validateFilters() throws HeadlessException
    {
        if (!Objects.equals(getWorker().getBoxValue(filterByBox), "AC") && getWorker().isBlank(filterTextArea.getText().trim()))
        {
            JOptionPane.showMessageDialog(taskDialog, "Please set recipients filter!", "Missing Field", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    private void acceptTask()
    {
        setTask(new ESTask());
        getWorker().resetAllFields(this);
        codeField.setText(getWorker().nextCode(getTasks(), "S"));

        executeButton.setEnabled(false);
        deleteButton.setEnabled(false);
        copyButton.setEnabled(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyCSVFilterButton;
    private javax.swing.JButton applyCheckFilterButton;
    private javax.swing.JButton cancelCSVFilterButton;
    private javax.swing.JButton cancelCheckFilterButton;
    private javax.swing.JComboBox chargeBox;
    private javax.swing.JDialog checkFilterDialog;
    private javax.swing.JButton closeButton;
    private javax.swing.JTextField codeField;
    private javax.swing.JButton copyButton;
    private javax.swing.JDialog csvFilterDialog;
    public javax.swing.JScrollPane csvFilterItemsAreaScroller;
    private javax.swing.JPanel csvFilterItemsPanel;
    public javax.swing.JTextArea csvFilterTextArea;
    private javax.swing.JComboBox<String> cycleBox;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField descriptionField;
    private javax.swing.JPanel detailsPanel;
    private javax.swing.JComboBox documentBox;
    private javax.swing.JButton executeButton;
    private javax.swing.JPanel executionPanel;
    private com.toedter.calendar.JDateChooser expiryDateChooser;
    private javax.swing.JComboBox filterByBox;
    private javax.swing.JScrollPane filterScroller;
    private javax.swing.JTextArea filterTextArea;
    private javax.swing.JTree filterTree;
    private javax.swing.JPanel filterTreePanel;
    private javax.swing.JScrollPane filterTreeScroller;
    private javax.swing.JPanel filtersPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private com.toedter.calendar.JDateChooser nextDateChooser;
    private com.toedter.calendar.JDateChooser previousDateChooser;
    private javax.swing.JComboBox<String> rangeBox;
    private javax.swing.JPanel rfPanel;
    private javax.swing.JComboBox runTimeBox;
    private javax.swing.JButton saveButton;
    public javax.swing.JTextArea selectedNodesArea;
    public javax.swing.JScrollPane selectedNodesAreaScroller;
    private javax.swing.JPanel selectedNodesPanel;
    private javax.swing.JComboBox statusBox;
    public javax.swing.JDialog taskDialog;
    private javax.swing.JTree taskTree;
    private javax.swing.JScrollPane taskTreeScroller;
    // End of variables declaration//GEN-END:variables

    private DBClient getClient()
    {
        return getBox().getdClient();
    }

    /**
     * @return the worker
     */
    public AXWorker getWorker()
    {
        return getBox().getWorker();
    }

    /**
     * @return the tasks
     */
    public TreeMap<String, ESTask> getTasks()
    {
        return tasks;
    }

    /**
     * @param tasks the tasks to set
     */
    public void setTasks(TreeMap<String, ESTask> tasks)
    {
        this.tasks = tasks;
    }

    /**
     * @return the task
     */
    public ESTask getTask()
    {
        return task;
    }

    /**
     * @param task the task to set
     */
    public void setTask(ESTask task)
    {
        this.task = task;
    }

    /**
     * @return the box
     */
    public ATBox getBox()
    {
        return box;
    }
}
