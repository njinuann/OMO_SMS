/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ruby.sms;

import Ruby.APController;
import Ruby.APMain;
import Ruby.DBClient;
import Ruby.acx.ATBox;
import Ruby.acx.AXWorker;
import Ruby.acx.TRenderer;
import Ruby.model.AXCharge;
import Ruby.model.CLItem;
import Ruby.model.MXAlert;
import com.toedter.calendar.JDateChooser;
import java.awt.HeadlessException;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.MouseEvent;
import java.util.Date;
import java.util.Objects;
import java.util.TreeMap;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.border.TitledBorder;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;

/**
 *
 * @author Pecherk
 */
public final class ALPanel extends javax.swing.JPanel
{

    private MXAlert alert = new MXAlert();
    private boolean fireFilterEvent = true;
    private TreeMap<String, MXAlert> alerts = new TreeMap<>();
    private static final ATBox box = new ATBox(APMain.acxLog);

    /**
     * Creates new form MXPanel
     */
    public ALPanel()
    {
        initComponents();
        initDialog();
    }

    public void initDialog()
    {
        alertDialog.setIconImage(APMain.getIconImage());
        alertDialog.setContentPane(this);
        alertDialog.pack();

        alertDialog.setResizable(false);
        alertDialog.setLocationRelativeTo(APMain.apFrame);
        configureDateChooser(nextDateChooser);

        configureDateChooser(previousDateChooser);
        configureDateChooser(expiryDateChooser);
        Date currentDate = getdClient().getProcessingDate();

        nextDateChooser.setMinSelectableDate(currentDate);
        expiryDateChooser.setMinSelectableDate(currentDate);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        filterByBox = new javax.swing.JComboBox();
        checkFilterDialog = new javax.swing.JDialog();
        selectedNodesPanel = new javax.swing.JPanel();
        selectedNodesAreaScroller = new javax.swing.JScrollPane();
        selectedNodesArea = new javax.swing.JTextArea();
        jSeparator5 = new javax.swing.JSeparator();
        cancelCheckFilterButton = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JSeparator();
        applyCheckFilterButton = new javax.swing.JButton();
        filterTreePanel = new javax.swing.JPanel();
        filterTreeScroller = new javax.swing.JScrollPane();
        filterTree = new ALTree(this);
        filterScroller = new javax.swing.JScrollPane();
        filterTextArea = new javax.swing.JTextArea();
        templatePopupMenu = new javax.swing.JPopupMenu();
        acctNoPHMenuItem = new javax.swing.JMenuItem();
        custNamePHMenuItem = new javax.swing.JMenuItem();
        currencyPHMenuItem = new javax.swing.JMenuItem();
        amountPHMenuItem = new javax.swing.JMenuItem();
        chargePHMenuItem = new javax.swing.JMenuItem();
        descriptionPHMenuItem = new javax.swing.JMenuItem();
        datePHMenuItem = new javax.swing.JMenuItem();
        txnOriginatorPHMenuItem = new javax.swing.JMenuItem();
        balancePHMenuItem = new javax.swing.JMenuItem();
        dueDatePHMenuItem = new javax.swing.JMenuItem();
        repayAmountPHMenuItem = new javax.swing.JMenuItem();
        arrearsPHMenuItem = new javax.swing.JMenuItem();
        contraAcctNoPHMenuItem = new javax.swing.JMenuItem();
        maturityDatePHMenuItem = new javax.swing.JMenuItem();
        startDatePHMenuItem = new javax.swing.JMenuItem();
        tenorPHMenuItem = new javax.swing.JMenuItem();
        ratePHMenuItem = new javax.swing.JMenuItem();
        productDescPHMenuItem = new javax.swing.JMenuItem();
        guarantorNamePHMenuItem = new javax.swing.JMenuItem();
        csvFilterDialog = new javax.swing.JDialog();
        csvFilterItemsPanel = new javax.swing.JPanel();
        csvFilterItemsAreaScroller = new javax.swing.JScrollPane();
        csvFilterTextArea = new javax.swing.JTextArea();
        jSeparator8 = new javax.swing.JSeparator();
        cancelCSVFilterButton = new javax.swing.JButton();
        jSeparator9 = new javax.swing.JSeparator();
        applyCSVFilterButton = new javax.swing.JButton();
        alertDialog = new javax.swing.JDialog();
        alertTreeScroller = new javax.swing.JScrollPane();
        alertTree = new javax.swing.JTree();
        jSeparator1 = new javax.swing.JSeparator();
        saveButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        closeButton = new javax.swing.JButton();
        executeButton = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        deleteButton = new javax.swing.JButton();
        detailsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        alertCodeField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        descriptionField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        alertTypeBox = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        chargeBox = new javax.swing.JComboBox();
        templatesPanel = new javax.swing.JPanel();
        templatesTreeScroller = new javax.swing.JScrollPane();
        templatesTree = new javax.swing.JTree();
        templateDisplayPanel = new javax.swing.JPanel();
        templateScroller = new javax.swing.JScrollPane();
        templateArea = new javax.swing.JTextArea();
        filtersPanel = new javax.swing.JPanel();
        rfPanel = new AFPanel(filterByBox, filterScroller);
        executionPanel = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        runTimeBox = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        alertDaysField = new javax.swing.JTextField();
        nextDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        frequencyBox = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        priorityBox = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        statusBox = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        expiryDateChooser = new com.toedter.calendar.JDateChooser();
        previousDateChooser = new com.toedter.calendar.JDateChooser();
        copyButton = new javax.swing.JButton();
        jSeparator10 = new javax.swing.JSeparator();

        filterByBox.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        filterByBox.setForeground(new java.awt.Color(0, 102, 102));
        filterByBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---select filter---", "MN~Mobile Number", "AN~Account Number", "CN~Customer Number", "AP~Account Product", "BU~Business Unit", "CT~Customer Type", "CS~Channel Scheme", "AL~All Customers" }));
        filterByBox.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                filterByBoxItemStateChanged(evt);
            }
        });

        checkFilterDialog.setTitle("Filters");
        checkFilterDialog.setAlwaysOnTop(true);
        checkFilterDialog.setIconImage(null);
        checkFilterDialog.setModal(true);
        checkFilterDialog.addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                checkFilterDialogWindowClosing(evt);
            }
        });

        selectedNodesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "Selected Items"));

        selectedNodesArea.setEditable(false);
        selectedNodesArea.setColumns(20);
        selectedNodesArea.setRows(5);
        selectedNodesArea.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        selectedNodesAreaScroller.setViewportView(selectedNodesArea);

        javax.swing.GroupLayout selectedNodesPanelLayout = new javax.swing.GroupLayout(selectedNodesPanel);
        selectedNodesPanel.setLayout(selectedNodesPanelLayout);
        selectedNodesPanelLayout.setHorizontalGroup(
            selectedNodesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectedNodesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selectedNodesAreaScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                .addContainerGap())
        );
        selectedNodesPanelLayout.setVerticalGroup(
            selectedNodesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, selectedNodesPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(selectedNodesAreaScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                .addContainerGap())
        );

        cancelCheckFilterButton.setText("Cancel");
        cancelCheckFilterButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cancelCheckFilterButtonActionPerformed(evt);
            }
        });

        jSeparator6.setOrientation(javax.swing.SwingConstants.VERTICAL);

        applyCheckFilterButton.setText("Apply");
        applyCheckFilterButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                applyCheckFilterButtonActionPerformed(evt);
            }
        });

        filterTreePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "Available Items"));

        filterTreeScroller.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray));

        filterTree.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Filters");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Item 1");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Item 2");
        treeNode1.add(treeNode2);
        filterTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        filterTreeScroller.setViewportView(filterTree);

        javax.swing.GroupLayout filterTreePanelLayout = new javax.swing.GroupLayout(filterTreePanel);
        filterTreePanel.setLayout(filterTreePanelLayout);
        filterTreePanelLayout.setHorizontalGroup(
            filterTreePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterTreePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filterTreeScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                .addContainerGap())
        );
        filterTreePanelLayout.setVerticalGroup(
            filterTreePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, filterTreePanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(filterTreeScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout checkFilterDialogLayout = new javax.swing.GroupLayout(checkFilterDialog.getContentPane());
        checkFilterDialog.getContentPane().setLayout(checkFilterDialogLayout);
        checkFilterDialogLayout.setHorizontalGroup(
            checkFilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(checkFilterDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(checkFilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator5)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, checkFilterDialogLayout.createSequentialGroup()
                        .addComponent(applyCheckFilterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelCheckFilterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, checkFilterDialogLayout.createSequentialGroup()
                        .addComponent(filterTreePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectedNodesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        checkFilterDialogLayout.setVerticalGroup(
            checkFilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(checkFilterDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(checkFilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectedNodesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(filterTreePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(checkFilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jSeparator6, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cancelCheckFilterButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(applyCheckFilterButton))
                .addContainerGap())
        );

        checkFilterDialog.pack();
        checkFilterDialog.setLocationRelativeTo(null);

        filterTextArea.setEditable(false);
        filterTextArea.setColumns(20);
        filterTextArea.setForeground(new java.awt.Color(51, 102, 255));
        filterTextArea.setLineWrap(true);
        filterTextArea.setRows(5);
        filterTextArea.setWrapStyleWord(true);
        filterScroller.setViewportView(filterTextArea);

        templatePopupMenu.setLabel("Variable Fields");

        acctNoPHMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ruby/ximg/cert.png"))); // NOI18N
        acctNoPHMenuItem.setText("Account Number");
        acctNoPHMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                acctNoPHMenuItemActionPerformed(evt);
            }
        });
        templatePopupMenu.add(acctNoPHMenuItem);

        custNamePHMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ruby/ximg/cert.png"))); // NOI18N
        custNamePHMenuItem.setText("Customer Name");
        custNamePHMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                custNamePHMenuItemActionPerformed(evt);
            }
        });
        templatePopupMenu.add(custNamePHMenuItem);

        currencyPHMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ruby/ximg/cert.png"))); // NOI18N
        currencyPHMenuItem.setText("Transaction Currency");
        currencyPHMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                currencyPHMenuItemActionPerformed(evt);
            }
        });
        templatePopupMenu.add(currencyPHMenuItem);

        amountPHMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ruby/ximg/cert.png"))); // NOI18N
        amountPHMenuItem.setText("Transaction Amount");
        amountPHMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                amountPHMenuItemActionPerformed(evt);
            }
        });
        templatePopupMenu.add(amountPHMenuItem);

        chargePHMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ruby/ximg/cert.png"))); // NOI18N
        chargePHMenuItem.setText("Transaction Charge");
        chargePHMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chargePHMenuItemActionPerformed(evt);
            }
        });
        templatePopupMenu.add(chargePHMenuItem);

        descriptionPHMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ruby/ximg/cert.png"))); // NOI18N
        descriptionPHMenuItem.setText("Transaction Description");
        descriptionPHMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                descriptionPHMenuItemActionPerformed(evt);
            }
        });
        templatePopupMenu.add(descriptionPHMenuItem);

        datePHMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ruby/ximg/cert.png"))); // NOI18N
        datePHMenuItem.setText("Transaction Date");
        datePHMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                datePHMenuItemActionPerformed(evt);
            }
        });
        templatePopupMenu.add(datePHMenuItem);

        txnOriginatorPHMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ruby/ximg/cert.png"))); // NOI18N
        txnOriginatorPHMenuItem.setText("Transaction Originator");
        txnOriginatorPHMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                txnOriginatorPHMenuItemActionPerformed(evt);
            }
        });
        templatePopupMenu.add(txnOriginatorPHMenuItem);

        balancePHMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ruby/ximg/cert.png"))); // NOI18N
        balancePHMenuItem.setText("Cleared Balance");
        balancePHMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                balancePHMenuItemActionPerformed(evt);
            }
        });
        templatePopupMenu.add(balancePHMenuItem);

        dueDatePHMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ruby/ximg/cert.png"))); // NOI18N
        dueDatePHMenuItem.setText("Loan Due Date");
        dueDatePHMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                dueDatePHMenuItemActionPerformed(evt);
            }
        });
        templatePopupMenu.add(dueDatePHMenuItem);

        repayAmountPHMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ruby/ximg/cert.png"))); // NOI18N
        repayAmountPHMenuItem.setText("Repayment Amount");
        repayAmountPHMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                repayAmountPHMenuItemActionPerformed(evt);
            }
        });
        templatePopupMenu.add(repayAmountPHMenuItem);

        arrearsPHMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ruby/ximg/cert.png"))); // NOI18N
        arrearsPHMenuItem.setText("Loan Arrears");
        arrearsPHMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                arrearsPHMenuItemActionPerformed(evt);
            }
        });
        templatePopupMenu.add(arrearsPHMenuItem);

        contraAcctNoPHMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ruby/ximg/cert.png"))); // NOI18N
        contraAcctNoPHMenuItem.setText("Contra Account Number");
        contraAcctNoPHMenuItem.setToolTipText("");
        contraAcctNoPHMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                contraAcctNoPHMenuItemActionPerformed(evt);
            }
        });
        templatePopupMenu.add(contraAcctNoPHMenuItem);

        maturityDatePHMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ruby/ximg/cert.png"))); // NOI18N
        maturityDatePHMenuItem.setText("Maturity Date");
        maturityDatePHMenuItem.setToolTipText("");
        maturityDatePHMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                maturityDatePHMenuItemActionPerformed(evt);
            }
        });
        templatePopupMenu.add(maturityDatePHMenuItem);

        startDatePHMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ruby/ximg/cert.png"))); // NOI18N
        startDatePHMenuItem.setText("Start Date");
        startDatePHMenuItem.setToolTipText("");
        startDatePHMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                startDatePHMenuItemActionPerformed(evt);
            }
        });
        templatePopupMenu.add(startDatePHMenuItem);

        tenorPHMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ruby/ximg/cert.png"))); // NOI18N
        tenorPHMenuItem.setText("Tenor");
        tenorPHMenuItem.setToolTipText("");
        tenorPHMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                tenorPHMenuItemActionPerformed(evt);
            }
        });
        templatePopupMenu.add(tenorPHMenuItem);

        ratePHMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ruby/ximg/cert.png"))); // NOI18N
        ratePHMenuItem.setText("Rate");
        ratePHMenuItem.setToolTipText("");
        ratePHMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ratePHMenuItemActionPerformed(evt);
            }
        });
        templatePopupMenu.add(ratePHMenuItem);

        productDescPHMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ruby/ximg/cert.png"))); // NOI18N
        productDescPHMenuItem.setText("Product Description");
        productDescPHMenuItem.setToolTipText("");
        productDescPHMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                productDescPHMenuItemActionPerformed(evt);
            }
        });
        templatePopupMenu.add(productDescPHMenuItem);

        guarantorNamePHMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ruby/ximg/cert.png"))); // NOI18N
        guarantorNamePHMenuItem.setText("Guarantor Name");
        guarantorNamePHMenuItem.setToolTipText("");
        guarantorNamePHMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                guarantorNamePHMenuItemActionPerformed(evt);
            }
        });
        templatePopupMenu.add(guarantorNamePHMenuItem);

        csvFilterDialog.setTitle("Filters");
        csvFilterDialog.setAlwaysOnTop(true);
        csvFilterDialog.setIconImage(null);
        csvFilterDialog.setModal(true);
        csvFilterDialog.addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                csvFilterDialogWindowClosing(evt);
            }
        });

        csvFilterItemsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "CSV Match Items"));

        csvFilterTextArea.setColumns(20);
        csvFilterTextArea.setRows(5);
        csvFilterItemsAreaScroller.setViewportView(csvFilterTextArea);

        javax.swing.GroupLayout csvFilterItemsPanelLayout = new javax.swing.GroupLayout(csvFilterItemsPanel);
        csvFilterItemsPanel.setLayout(csvFilterItemsPanelLayout);
        csvFilterItemsPanelLayout.setHorizontalGroup(
            csvFilterItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(csvFilterItemsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(csvFilterItemsAreaScroller)
                .addContainerGap())
        );
        csvFilterItemsPanelLayout.setVerticalGroup(
            csvFilterItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, csvFilterItemsPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(csvFilterItemsAreaScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                .addContainerGap())
        );

        cancelCSVFilterButton.setText("Cancel");
        cancelCSVFilterButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cancelCSVFilterButtonActionPerformed(evt);
            }
        });

        jSeparator9.setOrientation(javax.swing.SwingConstants.VERTICAL);

        applyCSVFilterButton.setText("Apply");
        applyCSVFilterButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                applyCSVFilterButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout csvFilterDialogLayout = new javax.swing.GroupLayout(csvFilterDialog.getContentPane());
        csvFilterDialog.getContentPane().setLayout(csvFilterDialogLayout);
        csvFilterDialogLayout.setHorizontalGroup(
            csvFilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(csvFilterDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(csvFilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator8, javax.swing.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, csvFilterDialogLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(applyCSVFilterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelCSVFilterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(csvFilterItemsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        csvFilterDialogLayout.setVerticalGroup(
            csvFilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(csvFilterDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(csvFilterItemsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(csvFilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jSeparator9, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cancelCSVFilterButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(applyCSVFilterButton))
                .addContainerGap())
        );

        csvFilterDialog.pack();
        csvFilterDialog.setLocationRelativeTo(null);

        alertDialog.setTitle("Ruby Alerts");
        alertDialog.setIconImage(APMain.getIconImage());
        alertDialog.setModal(true);
        alertDialog.setName("alertDialog"); // NOI18N

        javax.swing.GroupLayout alertDialogLayout = new javax.swing.GroupLayout(alertDialog.getContentPane());
        alertDialog.getContentPane().setLayout(alertDialogLayout);
        alertDialogLayout.setHorizontalGroup(
            alertDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        alertDialogLayout.setVerticalGroup(
            alertDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        alertTreeScroller.setBorder(null);

        alertTree.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Alerts");
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Add Alert");
        treeNode1.add(treeNode2);
        alertTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        alertTree.setAutoscrolls(true);
        alertTree.setCellRenderer(new TRenderer());
        alertTree.setRootVisible(false);
        alertTree.setShowsRootHandles(true);
        alertTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener()
        {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt)
            {
                alertTreeValueChanged(evt);
            }
        });
        alertTreeScroller.setViewportView(alertTree);

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                saveButtonActionPerformed(evt);
            }
        });

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                closeButtonActionPerformed(evt);
            }
        });

        executeButton.setText("Execute");
        executeButton.setEnabled(false);
        executeButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                executeButtonActionPerformed(evt);
            }
        });

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);

        deleteButton.setText("Delete");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                deleteButtonActionPerformed(evt);
            }
        });

        detailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "Alert Details"));

        jLabel1.setText("Alert Code");

        alertCodeField.setEditable(false);
        alertCodeField.setForeground(new java.awt.Color(51, 102, 255));
        alertCodeField.setToolTipText("Alert Code");

        jLabel2.setText("Description");

        descriptionField.setForeground(new java.awt.Color(51, 102, 255));
        descriptionField.setToolTipText("Alert Description");

        jLabel3.setText("Alert Type");

        alertTypeBox.setForeground(new java.awt.Color(51, 102, 255));
        alertTypeBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---select---", "AO~Account Opening", "WR~CHANNEL TXN Credit", "CR~Credit", "CV~Credit Reversal", "DR~Debit", "DV~Debit Reversal", "LA~Loan Arrears", "LD~Loan Due", "LP~Loan Approval", "GR~Guarantor Default Notification", "TD~Term Deposit Approval", "LC~Loan Clearance", "LT~Loan Topup Eligibility", "PC~PIN Change", "SD~Deactivation", "SE~Enrollment", "LB~Loan Disbursement", "LR~Loan Repayment", "BR~Broadcast" }));
        alertTypeBox.setToolTipText("Alert Type");
        alertTypeBox.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                alertTypeBoxItemStateChanged(evt);
            }
        });

        jLabel14.setText("Alert Charge");

        chargeBox.setForeground(new java.awt.Color(51, 102, 255));
        chargeBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        chargeBox.setToolTipText("Alert Charge");

        javax.swing.GroupLayout detailsPanelLayout = new javax.swing.GroupLayout(detailsPanel);
        detailsPanel.setLayout(detailsPanelLayout);
        detailsPanelLayout.setHorizontalGroup(
            detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(alertTypeBox, 0, 1, Short.MAX_VALUE)
                    .addComponent(alertCodeField, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(descriptionField)
                    .addComponent(chargeBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        detailsPanelLayout.setVerticalGroup(
            detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailsPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(alertCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(descriptionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(alertTypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(chargeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        templatesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "Message Templates"));

        templatesTreeScroller.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray));

        templatesTree.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        templatesTree.setForeground(new java.awt.Color(51, 102, 255));
        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Templates");
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Add Template");
        treeNode1.add(treeNode2);
        templatesTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        templatesTree.setCellRenderer(new TRenderer());
        templatesTree.setRootVisible(false);
        templatesTree.setShowsRootHandles(true);
        templatesTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener()
        {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt)
            {
                templatesTreeValueChanged(evt);
            }
        });
        templatesTreeScroller.setViewportView(templatesTree);

        templateDisplayPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "EN~Template"));

        templateScroller.setBorder(null);

        templateArea.setColumns(20);
        templateArea.setForeground(new java.awt.Color(51, 102, 255));
        templateArea.setLineWrap(true);
        templateArea.setRows(5);
        templateArea.setToolTipText("Right-click on template text area or click the <Insert Field> button to insert a variable field.");
        templateArea.setWrapStyleWord(true);
        templateArea.addCaretListener(new javax.swing.event.CaretListener()
        {
            public void caretUpdate(javax.swing.event.CaretEvent evt)
            {
                templateAreaCaretUpdate(evt);
            }
        });
        templateArea.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                templateAreaMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                templateAreaMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                templateAreaMouseReleased(evt);
            }
        });
        templateScroller.setViewportView(templateArea);

        javax.swing.GroupLayout templateDisplayPanelLayout = new javax.swing.GroupLayout(templateDisplayPanel);
        templateDisplayPanel.setLayout(templateDisplayPanelLayout);
        templateDisplayPanelLayout.setHorizontalGroup(
            templateDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(templateDisplayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(templateScroller)
                .addContainerGap())
        );
        templateDisplayPanelLayout.setVerticalGroup(
            templateDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(templateDisplayPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(templateScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout templatesPanelLayout = new javax.swing.GroupLayout(templatesPanel);
        templatesPanel.setLayout(templatesPanelLayout);
        templatesPanelLayout.setHorizontalGroup(
            templatesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, templatesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(templatesTreeScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(templateDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        templatesPanelLayout.setVerticalGroup(
            templatesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(templatesPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(templatesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(templatesTreeScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(templatesPanelLayout.createSequentialGroup()
                        .addComponent(templateDisplayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        filtersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "Recipients Filter (CSV)"));

        rfPanel.setForeground(new java.awt.Color(51, 102, 255));

        javax.swing.GroupLayout rfPanelLayout = new javax.swing.GroupLayout(rfPanel);
        rfPanel.setLayout(rfPanelLayout);
        rfPanelLayout.setHorizontalGroup(
            rfPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        rfPanelLayout.setVerticalGroup(
            rfPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 49, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout filtersPanelLayout = new javax.swing.GroupLayout(filtersPanel);
        filtersPanel.setLayout(filtersPanelLayout);
        filtersPanelLayout.setHorizontalGroup(
            filtersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filtersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rfPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        filtersPanelLayout.setVerticalGroup(
            filtersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filtersPanelLayout.createSequentialGroup()
                .addComponent(rfPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        executionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "Alert Execution"));

        jLabel16.setText("Run Time");

        runTimeBox.setForeground(new java.awt.Color(51, 102, 255));
        runTimeBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---select---", "Any Time", "Morning", "Afternoon", "Evening", "Night" }));
        runTimeBox.setToolTipText("Run Time");

        jLabel15.setText("Alert Days");

        alertDaysField.setEditable(false);
        alertDaysField.setForeground(new java.awt.Color(51, 102, 255));
        alertDaysField.setToolTipText("Alert Days");
        alertDaysField.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                alertDaysFieldFocusLost(evt);
            }
        });

        nextDateChooser.setToolTipText("Next Date");
        nextDateChooser.setDateFormatString("dd-MMM-yyyy");

        jLabel6.setText("Next Date");

        frequencyBox.setForeground(new java.awt.Color(51, 102, 255));
        frequencyBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---select---", "Once", "Daily", "Weekly", "Monthly", "Annually", "Real-Time", "Triggered" }));
        frequencyBox.setToolTipText("Alert Frequency");

        jLabel5.setText("Frequency");

        jLabel7.setText("Alert Priority");

        priorityBox.setForeground(new java.awt.Color(51, 102, 255));
        priorityBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---select---", "1~Low", "2~Medium", "3~High" }));
        priorityBox.setToolTipText("Alert Priority");

        jLabel9.setText("Alert Status");

        statusBox.setForeground(new java.awt.Color(51, 102, 255));
        statusBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "A~Active", "C~Closed", "E~Expired", "R~Running" }));
        statusBox.setToolTipText("Alert Status");

        jLabel10.setText("Expiry Date");

        jLabel8.setText("Previous Date");

        expiryDateChooser.setToolTipText("Expiry Date");
        expiryDateChooser.setDateFormatString("dd-MMM-yyyy");

        previousDateChooser.setToolTipText("Previous Date");
        previousDateChooser.setDateFormatString("dd-MMM-yyyy");
        previousDateChooser.setEnabled(false);

        javax.swing.GroupLayout executionPanelLayout = new javax.swing.GroupLayout(executionPanel);
        executionPanel.setLayout(executionPanelLayout);
        executionPanelLayout.setHorizontalGroup(
            executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(executionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16)
                    .addGroup(executionPanelLayout.createSequentialGroup()
                        .addGroup(executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(runTimeBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, executionPanelLayout.createSequentialGroup()
                                .addGroup(executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel9))
                                .addGroup(executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, executionPanelLayout.createSequentialGroup()
                                        .addGap(4, 4, 4)
                                        .addGroup(executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(priorityBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(statusBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(executionPanelLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(frequencyBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel6)
                            .addComponent(jLabel10)
                            .addComponent(jLabel15))
                        .addGap(9, 9, 9)
                        .addGroup(executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(previousDateChooser, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nextDateChooser, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(expiryDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(alertDaysField, javax.swing.GroupLayout.Alignment.LEADING))))
                .addContainerGap())
        );
        executionPanelLayout.setVerticalGroup(
            executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(executionPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(alertDaysField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(runTimeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nextDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(frequencyBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(priorityBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8))
                    .addComponent(previousDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(statusBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10))
                    .addComponent(expiryDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        copyButton.setText("Copy");
        copyButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                copyButtonActionPerformed(evt);
            }
        });

        jSeparator10.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(alertTreeScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(executeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator10, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(copyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(detailsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(filtersPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(templatesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(executionPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 555, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(detailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(executionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(templatesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filtersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSeparator2)
                            .addComponent(closeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(executeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(deleteButton)
                                .addComponent(saveButton)
                                .addComponent(copyButton))
                            .addComponent(jSeparator10)))
                    .addComponent(alertTreeScroller))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void alertTreeValueChanged(javax.swing.event.TreeSelectionEvent evt)//GEN-FIRST:event_alertTreeValueChanged
    {//GEN-HEADEREND:event_alertTreeValueChanged
        // TODO add your handling code here:
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) alertTree.getLastSelectedPathComponent();
        if (selectedNode != null)
        {
            if (selectedNode.getUserObject() instanceof MXAlert)
            {
                displayAlert((MXAlert) selectedNode.getUserObject());
            }
            else
            {
                acceptAlert();
            }
        }
    }//GEN-LAST:event_alertTreeValueChanged

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveButtonActionPerformed
    {//GEN-HEADEREND:event_saveButtonActionPerformed
        // TODO add your handling code here:
        if (getWorker().validateFields(alertDialog, this, templatesPanel, filtersPanel) && validateTemplates() && validateFilters())
        {
            getAlert().setAlertCode(alertCodeField.getText());
            getAlert().setAlertType(getWorker().getBoxValue(alertTypeBox));
            getAlert().setDescription(descriptionField.getText());
            getAlert().setChargeCode(getWorker().getBoxValue(chargeBox));
            getAlert().setRunTime(runTimeBox.getSelectedItem().toString());
            if ("LA".equals(getAlert().getAlertType()) || "LD".equals(getAlert().getAlertType()))
            {
                getAlert().setAlertDays(alertDaysField.getText());
            }
            getAlert().setExpiryDate(expiryDateChooser.getDate());
            getAlert().setFilterBy(getWorker().getBoxValue(filterByBox));
            getAlert().setFilters(getWorker().createArrayList(filterTextArea.getText()));
            getAlert().setFrequency(frequencyBox.getSelectedItem().toString());
            getAlert().setPreviousDate(previousDateChooser.getDate());
            getAlert().setPriority(priorityBox.getSelectedIndex());
            getAlert().setNextDate(nextDateChooser.getDate());
            getAlert().setStatus(getWorker().getBoxValue(statusBox));

            boolean proceed = getAlerts().containsKey(getAlert().getAlertCode())
                    ? (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(alertDialog, "Are you sure you want to save changes to this alert?", "Confirm Update", JOptionPane.YES_NO_OPTION))
                    : (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(alertDialog, "Are you sure you want to save this new alert?", "Confirm Save", JOptionPane.YES_NO_OPTION));
            if (proceed)
            {
                getAlerts().put(getAlert().getAlertCode(), getAlert());
                if (getdClient().upsertAlert(getAlert()))
                {
                    JOptionPane.showMessageDialog(alertDialog, "Alert saved successfully.");
                    setAlertTree();
                }
                else
                {
                    JOptionPane.showMessageDialog(alertDialog, "Unable to save alert!", "Saving Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_closeButtonActionPerformed
    {//GEN-HEADEREND:event_closeButtonActionPerformed
        // TODO add your handling code here:
        alertDialog.setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void executeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_executeButtonActionPerformed
    {//GEN-HEADEREND:event_executeButtonActionPerformed
        // TODO add your handling code here:
        if (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(alertDialog, "Are you sure you want to execute this alert?", "Confirm Execute", JOptionPane.YES_NO_OPTION))
        {
            Date currentDate = getdClient().getProcessingDate();
            getAlert().setExpiryDate(currentDate.after(getAlert().getExpiryDate()) ? currentDate : getAlert().getExpiryDate());
            getAlert().setNextDate(getdClient().getProcessingDate());
            getAlert().setStatus("A");
            getAlerts().put(getAlert().getAlertCode(), getAlert());
            getdClient().upsertAlert(getAlert());
            setAlertTree();
        }
    }//GEN-LAST:event_executeButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
    {//GEN-HEADEREND:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        if (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(alertDialog, "Are you sure you want to delete this alert?", "Confirm Delete", JOptionPane.YES_NO_OPTION))
        {
            if (getdClient().deleteAlert(getAlert()))
            {
                getAlerts().remove(alertCodeField.getText());
            }
            if (!getAlerts().containsKey(alertCodeField.getText()))
            {
                setAlertTree();
                JOptionPane.showMessageDialog(alertDialog, "Alert deleted successfully.");
            }
            else
            {
                JOptionPane.showMessageDialog(alertDialog, "Unable to delete alert!", "Deletion Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void filterByBoxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_filterByBoxItemStateChanged
    {//GEN-HEADEREND:event_filterByBoxItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED)
        {
            String filterBy = getWorker().getBoxValue(filterByBox);
            if (fireFilterEvent && !getWorker().isBlank(filterBy))
            {
                if (Objects.equals(filterBy, "AL"))
                {
                    filterTextArea.setText("");
                }
                else
                {
                    showFilterDialog();
                }
            }
        }
    }//GEN-LAST:event_filterByBoxItemStateChanged

    private void templatesTreeValueChanged(javax.swing.event.TreeSelectionEvent evt)//GEN-FIRST:event_templatesTreeValueChanged
    {//GEN-HEADEREND:event_templatesTreeValueChanged
        // TODO add your handling code here:
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) templatesTree.getLastSelectedPathComponent();
        if (selectedNode != null)
        {
            String langCode = selectedNode.getUserObject().toString().split("~")[0].trim();
            templateArea.setText(getAlert().getTemplates().get(langCode));
            ((TitledBorder) templateDisplayPanel.getBorder()).setTitle(selectedNode.getUserObject().toString().split("~")[1].trim() + "~Template");
            templateDisplayPanel.updateUI();
        }
    }//GEN-LAST:event_templatesTreeValueChanged

    public void showDialog()
    {
        setChargeBox();
        setAlertTree();
        alertDialog.setVisible(true);
    }

    public void setTemplatesTree()
    {
        DefaultMutableTreeNode rootNode = ((DefaultMutableTreeNode) templatesTree.getModel().getRoot());
        rootNode.removeAllChildren();

        for (CLItem cLItem : getWorker().sortArray(APController.getLanguages().values().toArray(new CLItem[0]), true))
        {
            rootNode.add(new DefaultMutableTreeNode(cLItem));
        }
        getWorker().selectTreeNode(templatesTree, APController.defaultLanguage);
    }

    private void cancelCheckFilterButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelCheckFilterButtonActionPerformed
    {//GEN-HEADEREND:event_cancelCheckFilterButtonActionPerformed
        checkFilterDialog.setVisible(false);
        setFilters();
    }//GEN-LAST:event_cancelCheckFilterButtonActionPerformed

    public void setFilters()
    {
        fireFilterEvent = false;
        filterTextArea.setText(getWorker().createCSVList(getAlert().getFilters()));
        if (!getWorker().isBlank(getAlert().getFilterBy()))
        {
            getWorker().selectBoxValue(filterByBox, getAlert().getFilterBy());
        }
        filterTextArea.requestFocus();
        fireFilterEvent = true;
    }

    private void configureDateChooser(JDateChooser dateChooser)
    {
        ((JTextField) dateChooser.getDateEditor()).setEditable(false);
        ((JTextField) dateChooser.getDateEditor()).setForeground(new java.awt.Color(51, 102, 255));
        ((JTextField) dateChooser.getDateEditor()).setDisabledTextColor(new java.awt.Color(51, 102, 255));
    }

    public void showFilterDialog()
    {
        SwingUtilities.invokeLater(()
                ->
        {
            String filterBy = getWorker().getBoxValue(filterByBox);
            if ("AP".equals(filterBy) || "BU".equals(filterBy) || "CS".equals(filterBy) || "CT".equals(filterBy))
            {
                ((ALTree) filterTree).setAlPanel(ALPanel.this);
                checkFilterDialog.setIconImage(APMain.getIconImage());
                switch (filterBy)
                {
                    case "AP":
                        ((ALTree) filterTree).setFilterTree(getdClient().queryProducts(), ("AP".equals(getAlert().getFilterBy()) ? getAlert().getFilters().toArray(new String[0]) : new String[0]), "All Products");
                        break;
                    case "BU":
                        ((ALTree) filterTree).setFilterTree(getdClient().queryBranches(), ("BU".equals(getAlert().getFilterBy()) ? getAlert().getFilters().toArray(new String[0]) : new String[0]), "Business Units");
                        break;
                    case "CS":
                        ((ALTree) filterTree).setFilterTree(getdClient().queryChannelSchemes(), ("CS".equals(getAlert().getFilterBy()) ? getAlert().getFilters().toArray(new String[0]) : new String[0]), "Channel Schemes");
                        break;
                    case "CT":
                        ((ALTree) filterTree).setFilterTree(getdClient().queryCustomerTypes(), ("CT".equals(getAlert().getFilterBy()) ? getAlert().getFilters().toArray(new String[0]) : new String[0]), "Customer Types");
                        break;
                }
                filterTree.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
                checkFilterDialog.setVisible(true);
            }
            else
            {
                csvFilterDialog.setIconImage(APMain.getIconImage());
                csvFilterTextArea.setText(filterBy.equals(getAlert().getFilterBy()) ? getWorker().createCSVList(getAlert().getFilters()) : "");
                csvFilterDialog.setVisible(true);
            }
        });
    }

    private void applyCheckFilterButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_applyCheckFilterButtonActionPerformed
    {//GEN-HEADEREND:event_applyCheckFilterButtonActionPerformed
        // TODO add your handling code here:
        StringBuilder buffer = new StringBuilder();
        for (TreePath treePath : (((ALTree) filterTree).getCheckedPaths()))
        {
            DefaultMutableTreeNode node = ((DefaultMutableTreeNode) treePath.getLastPathComponent());
            if (node.isLeaf())
            {
                buffer.append(buffer.length() > 0 ? "," + node.getUserObject().toString().split("~")[0].trim() : node.getUserObject().toString().split("~")[0].trim());
            }
        }
        filterTextArea.setText(buffer.toString());
        checkFilterDialog.setVisible(false);
    }//GEN-LAST:event_applyCheckFilterButtonActionPerformed

    private void alertTypeBoxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_alertTypeBoxItemStateChanged
    {//GEN-HEADEREND:event_alertTypeBoxItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED && alertTypeBox.getSelectedIndex() > 0)
        {
            String alertType = getWorker().getBoxValue(alertTypeBox);
            alertDaysField.setEditable("LA".equals(alertType) || "LD".equals(alertType) || "GR".equals(alertType));
            alertDaysField.setText(alertDaysField.isEditable() ? getWorker().checkBlank(getAlert().getAlertDays(), "") : "");

            switch (alertType)
            {
                case "AO":
                case "WR":
                case "CR":
                case "DR":
                case "CV":
                case "DV":
                case "SD":
                case "SE":
                case "PC":
                case "LB":
                case "LR":
                case "LP":
                case "TD":
                case "LC":
                    frequencyBox.setSelectedItem("Real-Time");
                    frequencyBox.setEnabled(false);
                    runTimeBox.setSelectedItem("Any Time");
                    runTimeBox.setEnabled(false);
                    break;
                case "LA":
                case "LD":
                case "LT":
                case "GR":
                    frequencyBox.setSelectedItem("Daily");
                    frequencyBox.setEnabled(false);
                    runTimeBox.setEnabled(true);
                    break;
                default:
                    frequencyBox.setEnabled(true);
                    runTimeBox.setEnabled(true);
                    break;
            }
        }
    }//GEN-LAST:event_alertTypeBoxItemStateChanged

    private void alertDaysFieldFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_alertDaysFieldFocusLost
    {//GEN-HEADEREND:event_alertDaysFieldFocusLost
        // TODO add your handling code here:
        StringBuilder buffer = new StringBuilder();
        String repeatDays = alertDaysField.getText().trim();
        if (repeatDays.trim().length() > 0)
        {
            repeatDays = repeatDays.replaceAll(";", ",").trim();
            for (String days : repeatDays.split(","))
            {
                if (days.trim().length() > 0)
                {
                    try
                    {
                        buffer.append(buffer.length() > 0 ? ("," + Integer.parseInt(days)) : Integer.parseInt(days));
                    }
                    catch (Exception ex)
                    {
                        JOptionPane.showMessageDialog(alertDialog, "Loan alert repeat days must be a comma-separated list such as <1,2,3 days>", "Invalid Input", JOptionPane.ERROR_MESSAGE);
                        alertDaysField.requestFocus();
                        alertDaysField.setText("");
                        return;
                    }
                }
            }
        }
        alertDaysField.setText(buffer.toString());
    }//GEN-LAST:event_alertDaysFieldFocusLost

    private void acctNoPHMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_acctNoPHMenuItemActionPerformed
    {//GEN-HEADEREND:event_acctNoPHMenuItemActionPerformed
        // TODO add your handling code here:
        processPlaceHolderAction(evt);
    }//GEN-LAST:event_acctNoPHMenuItemActionPerformed

    private void templateAreaMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_templateAreaMouseClicked
    {//GEN-HEADEREND:event_templateAreaMouseClicked
        // TODO add your handling code here:
        checkTemplatePopup(evt);
    }//GEN-LAST:event_templateAreaMouseClicked

    private void templateAreaMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_templateAreaMousePressed
    {//GEN-HEADEREND:event_templateAreaMousePressed
        // TODO add your handling code here:
        checkTemplatePopup(evt);
    }//GEN-LAST:event_templateAreaMousePressed

    private void templateAreaMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_templateAreaMouseReleased
    {//GEN-HEADEREND:event_templateAreaMouseReleased
        // TODO add your handling code here:
        checkTemplatePopup(evt);
    }//GEN-LAST:event_templateAreaMouseReleased

    private void custNamePHMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_custNamePHMenuItemActionPerformed
    {//GEN-HEADEREND:event_custNamePHMenuItemActionPerformed
        // TODO add your handling code here:
        processPlaceHolderAction(evt);
    }//GEN-LAST:event_custNamePHMenuItemActionPerformed

    private void currencyPHMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_currencyPHMenuItemActionPerformed
    {//GEN-HEADEREND:event_currencyPHMenuItemActionPerformed
        // TODO add your handling code here:
        processPlaceHolderAction(evt);
    }//GEN-LAST:event_currencyPHMenuItemActionPerformed

    private void amountPHMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_amountPHMenuItemActionPerformed
    {//GEN-HEADEREND:event_amountPHMenuItemActionPerformed
        // TODO add your handling code here:
        processPlaceHolderAction(evt);
    }//GEN-LAST:event_amountPHMenuItemActionPerformed

    private void descriptionPHMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_descriptionPHMenuItemActionPerformed
    {//GEN-HEADEREND:event_descriptionPHMenuItemActionPerformed
        // TODO add your handling code here:
        processPlaceHolderAction(evt);
    }//GEN-LAST:event_descriptionPHMenuItemActionPerformed

    private void datePHMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_datePHMenuItemActionPerformed
    {//GEN-HEADEREND:event_datePHMenuItemActionPerformed
        // TODO add your handling code here:
        processPlaceHolderAction(evt);
    }//GEN-LAST:event_datePHMenuItemActionPerformed

    private void balancePHMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_balancePHMenuItemActionPerformed
    {//GEN-HEADEREND:event_balancePHMenuItemActionPerformed
        // TODO add your handling code here:
        processPlaceHolderAction(evt);
    }//GEN-LAST:event_balancePHMenuItemActionPerformed

    private void cancelCSVFilterButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelCSVFilterButtonActionPerformed
    {//GEN-HEADEREND:event_cancelCSVFilterButtonActionPerformed
        // TODO add your handling code here:
        csvFilterDialog.setVisible(false);
        setFilters();
    }//GEN-LAST:event_cancelCSVFilterButtonActionPerformed

    private void applyCSVFilterButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_applyCSVFilterButtonActionPerformed
    {//GEN-HEADEREND:event_applyCSVFilterButtonActionPerformed
        // TODO add your handling code here:
        StringBuilder buffer = new StringBuilder();
        for (String item : csvFilterTextArea.getText().split(","))
        {
            buffer.append(buffer.length() > 0 ? "," : "").append(item);
        }
        filterTextArea.setText(buffer.toString());
        csvFilterDialog.setVisible(false);
    }//GEN-LAST:event_applyCSVFilterButtonActionPerformed

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_copyButtonActionPerformed
    {//GEN-HEADEREND:event_copyButtonActionPerformed
        // TODO add your handling code here:
        if ((JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(alertDialog, "Are you sure you want to create copy of this alert?", "Confirm Copy", JOptionPane.YES_NO_OPTION)))
        {
            try
            {
                MXAlert clone = (MXAlert) getAlert().clone();
                clone.setAlertCode(getWorker().nextCode(getAlerts(), "A"));
                if (getdClient().upsertAlert(clone))
                {
                    setAlertTree();
                    getWorker().selectTreeNode(alertTree, clone);
                }
                else
                {
                    JOptionPane.showMessageDialog(alertDialog, "Unable to copy alert! Please check alerts log for details.", "Copy Error!", JOptionPane.ERROR_MESSAGE);
                }
            }
            catch (Exception ex)
            {
                APMain.smsLog.logEvent(ex);
            }
        }
    }//GEN-LAST:event_copyButtonActionPerformed

    private void txnOriginatorPHMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txnOriginatorPHMenuItemActionPerformed
    {//GEN-HEADEREND:event_txnOriginatorPHMenuItemActionPerformed
        // TODO add your handling code here:
        processPlaceHolderAction(evt);
    }//GEN-LAST:event_txnOriginatorPHMenuItemActionPerformed

    private void updateTemplate()
    {
        // TODO add your handling code here:
        DefaultMutableTreeNode selectedTemplateNode = (DefaultMutableTreeNode) templatesTree.getLastSelectedPathComponent();
        if (selectedTemplateNode != null)
        {
            getAlert().getTemplates().put(selectedTemplateNode.getUserObject().toString().split("~")[0].trim(), templateArea.getText().trim());
        }
    }

    private void chargePHMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chargePHMenuItemActionPerformed
    {//GEN-HEADEREND:event_chargePHMenuItemActionPerformed
        // TODO add your handling code here:
        processPlaceHolderAction(evt);
    }//GEN-LAST:event_chargePHMenuItemActionPerformed

    private void repayAmountPHMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_repayAmountPHMenuItemActionPerformed
    {//GEN-HEADEREND:event_repayAmountPHMenuItemActionPerformed
        // TODO add your handling code here:
        processPlaceHolderAction(evt);
    }//GEN-LAST:event_repayAmountPHMenuItemActionPerformed

    private void dueDatePHMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_dueDatePHMenuItemActionPerformed
    {//GEN-HEADEREND:event_dueDatePHMenuItemActionPerformed
        // TODO add your handling code here:
        processPlaceHolderAction(evt);
    }//GEN-LAST:event_dueDatePHMenuItemActionPerformed

    private void arrearsPHMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_arrearsPHMenuItemActionPerformed
    {//GEN-HEADEREND:event_arrearsPHMenuItemActionPerformed
        // TODO add your handling code here:
        processPlaceHolderAction(evt);
    }//GEN-LAST:event_arrearsPHMenuItemActionPerformed

    private void contraAcctNoPHMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_contraAcctNoPHMenuItemActionPerformed
    {//GEN-HEADEREND:event_contraAcctNoPHMenuItemActionPerformed
        // TODO add your handling code here:
        processPlaceHolderAction(evt);
    }//GEN-LAST:event_contraAcctNoPHMenuItemActionPerformed

    private void checkFilterDialogWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_checkFilterDialogWindowClosing
    {//GEN-HEADEREND:event_checkFilterDialogWindowClosing
        // TODO add your handling code here:
        setFilters();
    }//GEN-LAST:event_checkFilterDialogWindowClosing

    private void csvFilterDialogWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_csvFilterDialogWindowClosing
    {//GEN-HEADEREND:event_csvFilterDialogWindowClosing
        // TODO add your handling code here:
        setFilters();
    }//GEN-LAST:event_csvFilterDialogWindowClosing

    private void templateAreaCaretUpdate(javax.swing.event.CaretEvent evt)//GEN-FIRST:event_templateAreaCaretUpdate
    {//GEN-HEADEREND:event_templateAreaCaretUpdate
        // TODO add your handling code here:
        updateTemplate();
    }//GEN-LAST:event_templateAreaCaretUpdate

    private void maturityDatePHMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_maturityDatePHMenuItemActionPerformed
    {//GEN-HEADEREND:event_maturityDatePHMenuItemActionPerformed
        // TODO add your handling code here:
        processPlaceHolderAction(evt);
    }//GEN-LAST:event_maturityDatePHMenuItemActionPerformed

    private void startDatePHMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_startDatePHMenuItemActionPerformed
    {//GEN-HEADEREND:event_startDatePHMenuItemActionPerformed
        // TODO add your handling code here:
        processPlaceHolderAction(evt);
    }//GEN-LAST:event_startDatePHMenuItemActionPerformed

    private void tenorPHMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_tenorPHMenuItemActionPerformed
    {//GEN-HEADEREND:event_tenorPHMenuItemActionPerformed
        // TODO add your handling code here:
        processPlaceHolderAction(evt);
    }//GEN-LAST:event_tenorPHMenuItemActionPerformed

    private void ratePHMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ratePHMenuItemActionPerformed
    {//GEN-HEADEREND:event_ratePHMenuItemActionPerformed
        // TODO add your handling code here:
        processPlaceHolderAction(evt);
    }//GEN-LAST:event_ratePHMenuItemActionPerformed

    private void productDescPHMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_productDescPHMenuItemActionPerformed
    {//GEN-HEADEREND:event_productDescPHMenuItemActionPerformed
        processPlaceHolderAction(evt);
    }//GEN-LAST:event_productDescPHMenuItemActionPerformed

    private void guarantorNamePHMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_guarantorNamePHMenuItemActionPerformed
    {//GEN-HEADEREND:event_guarantorNamePHMenuItemActionPerformed
       processPlaceHolderAction(evt);
    }//GEN-LAST:event_guarantorNamePHMenuItemActionPerformed

    public void setAlertTree()
    {
        setAlerts(getdClient().queryAlerts());
        DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode) alertTree.getModel().getRoot();

        rootNode.removeAllChildren();
        rootNode.add(new DefaultMutableTreeNode("Add Alert"));

        getAlerts().values().stream().forEach((mXAlert)
                ->
        {
            rootNode.add(new DefaultMutableTreeNode(mXAlert));
        });

        getWorker().expandAllNodes(alertTree, MXAlert.class);
    }

    private void displayAlert(MXAlert alert)
    {
        setAlert(alert);
        alertCodeField.setText(getAlert().getAlertCode());
        getWorker().selectBoxValue(alertTypeBox, getAlert().getAlertType());
        getWorker().selectBoxValue(chargeBox, getAlert().getChargeCode());
        descriptionField.setText(getAlert().getDescription());
        runTimeBox.setSelectedItem(getAlert().getRunTime());
        expiryDateChooser.setDate(getAlert().getExpiryDate());
        frequencyBox.setSelectedItem(getAlert().getFrequency());
        previousDateChooser.setDate(getAlert().getPreviousDate());
        getWorker().selectBoxValue(priorityBox, String.valueOf(getAlert().getPriority()));
        nextDateChooser.setDate(getAlert().getNextDate());
        getWorker().selectBoxValue(statusBox, getAlert().getStatus());
        alertDaysField.setText(getWorker().checkBlank(getAlert().getAlertDays(), ""));
        executeButton.setEnabled(true);
        deleteButton.setEnabled(true);
        copyButton.setEnabled(true);
        setTemplatesTree();
        setFilters();
    }

    private void setChargeBox()
    {
        chargeBox.removeAllItems();
        chargeBox.addItem("---select---");
        TreeMap<String, AXCharge> charges = getdClient().queryCharges(ALController.chargeScheme);
        charges.keySet().stream().forEach((chargeCode)
                ->
        {
            chargeBox.addItem(chargeCode + "~" + charges.get(chargeCode).getDescription());
        });
    }

    private boolean validateTemplates() throws HeadlessException
    {
        for (CLItem cLItem : APController.getLanguages().values())
        {
            if (!getAlert().getTemplates().containsKey(cLItem.getItemCode()))
            {
                JOptionPane.showMessageDialog(alertDialog, "Please set message template for " + cLItem.getItemLabel() + " language!", "Missing Field", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        return true;
    }

    private boolean validateFilters() throws HeadlessException
    {
        if (!Objects.equals(getWorker().getBoxValue(filterByBox), "AL") && getWorker().isBlank(filterTextArea.getText().trim()))
        {
            JOptionPane.showMessageDialog(alertDialog, "Please set recipients filter!", "Missing Field", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    private void acceptAlert()
    {
        setAlert(new MXAlert());
        getWorker().resetAllFields(this);
        alertCodeField.setText(getWorker().nextCode(getAlerts(), "A"));
        executeButton.setEnabled(false);
        deleteButton.setEnabled(false);
        copyButton.setEnabled(false);
        setTemplatesTree();
    }

    private void checkTemplatePopup(MouseEvent e)
    {
        if (e.isPopupTrigger())
        {
            showPlaceHolderPopup();
        }
    }

    private void processPlaceHolderAction(ActionEvent event)
    {
        String field = event.getActionCommand();
        switch (field)
        {
            case "Account Number":
                field = "{ACCOUNT}";
                break;
            case "Contra Account Number":
                field = "{CONTRA}";
                break;
            case "Customer Name":
                field = "{NAME}";
                break;
            case "Transaction Amount":
                field = "{AMOUNT}";
                break;
            case "Transaction Charge":
                field = "{CHARGE}";
                break;
            case "Transaction Description":
                field = "{DESCRIPTION}";
                break;
            case "Cleared Balance":
                field = "{BALANCE}";
                break;
            case "Transaction Date":
                field = "{DATE}";
                break;
            case "Transaction Currency":
                field = "{CURRENCY}";
                break;
            case "Transaction Originator":
                field = "{ORIGINATOR}";
                break;
            case "Loan Due Date":
                field = "{DUEDATE}";
                break;
            case "Repayment Amount":
                field = "{REPAYAMT}";
                break;
            case "Loan Arrears":
                field = "{ARREARS}";
                break;
            case "Maturity Date":
                field = "{MATURITY}";
                break;
            case "Start Date":
                field = "{STARTDATE}";
                break;
            case "Tenor":
                field = "{TENOR}";
                break;
            case "Rate":
                field = "{RATE}";
                break;
            case "Product Description":
                field = "{PRODDESC}";
                break;
            case "Guarantor Name":
                field = "{GUARANTOR}";
                break;

        }
        String text = templateArea.getText();
        int carPos = templateArea.getCaretPosition();
        String tSp = "", lSp = text.substring(0, carPos).endsWith(" ") ? "" : " ";
        if (carPos < text.length() && !text.substring(carPos).startsWith(" ") && !text.substring(carPos).startsWith("."))
        {
            tSp = text.substring(carPos).startsWith(" ") ? "" : " ";
        }
        templateArea.insert(lSp + field + tSp, carPos);
    }

    private void showPlaceHolderPopup()
    {
        try
        {
            Rectangle pos = templateArea.modelToView(templateArea.getCaretPosition());
            templatePopupMenu.show(templateArea, ((Double) pos.getX()).intValue(), ((Double) pos.getY()).intValue() + pos.height);
        }
        catch (Exception ex)
        {
            APMain.smsLog.logEvent(ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem acctNoPHMenuItem;
    private javax.swing.JTextField alertCodeField;
    private javax.swing.JTextField alertDaysField;
    public javax.swing.JDialog alertDialog;
    private javax.swing.JTree alertTree;
    private javax.swing.JScrollPane alertTreeScroller;
    private javax.swing.JComboBox alertTypeBox;
    private javax.swing.JMenuItem amountPHMenuItem;
    private javax.swing.JButton applyCSVFilterButton;
    private javax.swing.JButton applyCheckFilterButton;
    private javax.swing.JMenuItem arrearsPHMenuItem;
    private javax.swing.JMenuItem balancePHMenuItem;
    private javax.swing.JButton cancelCSVFilterButton;
    private javax.swing.JButton cancelCheckFilterButton;
    private javax.swing.JComboBox chargeBox;
    private javax.swing.JMenuItem chargePHMenuItem;
    private javax.swing.JDialog checkFilterDialog;
    private javax.swing.JButton closeButton;
    private javax.swing.JMenuItem contraAcctNoPHMenuItem;
    private javax.swing.JButton copyButton;
    private javax.swing.JDialog csvFilterDialog;
    public javax.swing.JScrollPane csvFilterItemsAreaScroller;
    private javax.swing.JPanel csvFilterItemsPanel;
    public javax.swing.JTextArea csvFilterTextArea;
    private javax.swing.JMenuItem currencyPHMenuItem;
    private javax.swing.JMenuItem custNamePHMenuItem;
    private javax.swing.JMenuItem datePHMenuItem;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField descriptionField;
    private javax.swing.JMenuItem descriptionPHMenuItem;
    private javax.swing.JPanel detailsPanel;
    private javax.swing.JMenuItem dueDatePHMenuItem;
    private javax.swing.JButton executeButton;
    private javax.swing.JPanel executionPanel;
    private com.toedter.calendar.JDateChooser expiryDateChooser;
    private javax.swing.JComboBox filterByBox;
    private javax.swing.JScrollPane filterScroller;
    private javax.swing.JTextArea filterTextArea;
    private javax.swing.JTree filterTree;
    private javax.swing.JPanel filterTreePanel;
    private javax.swing.JScrollPane filterTreeScroller;
    private javax.swing.JPanel filtersPanel;
    private javax.swing.JComboBox frequencyBox;
    private javax.swing.JMenuItem guarantorNamePHMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JMenuItem maturityDatePHMenuItem;
    private com.toedter.calendar.JDateChooser nextDateChooser;
    private com.toedter.calendar.JDateChooser previousDateChooser;
    private javax.swing.JComboBox priorityBox;
    private javax.swing.JMenuItem productDescPHMenuItem;
    private javax.swing.JMenuItem ratePHMenuItem;
    private javax.swing.JMenuItem repayAmountPHMenuItem;
    private javax.swing.JPanel rfPanel;
    private javax.swing.JComboBox runTimeBox;
    private javax.swing.JButton saveButton;
    public javax.swing.JTextArea selectedNodesArea;
    public javax.swing.JScrollPane selectedNodesAreaScroller;
    private javax.swing.JPanel selectedNodesPanel;
    private javax.swing.JMenuItem startDatePHMenuItem;
    private javax.swing.JComboBox statusBox;
    private javax.swing.JTextArea templateArea;
    private javax.swing.JPanel templateDisplayPanel;
    private javax.swing.JPopupMenu templatePopupMenu;
    private javax.swing.JScrollPane templateScroller;
    private javax.swing.JPanel templatesPanel;
    private javax.swing.JTree templatesTree;
    private javax.swing.JScrollPane templatesTreeScroller;
    private javax.swing.JMenuItem tenorPHMenuItem;
    private javax.swing.JMenuItem txnOriginatorPHMenuItem;
    // End of variables declaration//GEN-END:variables
    /**
     * @return the box
     */
    public static ATBox getBox()
    {
        return box;
    }

    private AXWorker getWorker()
    {
        return getBox().getWorker();
    }

    private DBClient getdClient()
    {
        return getBox().getdClient();
    }

    /**
     * @return the alerts
     */
    public TreeMap<String, MXAlert> getAlerts()
    {
        return alerts;
    }

    /**
     * @param alerts the alerts to set
     */
    public void setAlerts(TreeMap<String, MXAlert> alerts)
    {
        this.alerts = alerts;
    }

    /**
     * @return the alert
     */
    public MXAlert getAlert()
    {
        return alert;
    }

    /**
     * @param alert the alert to set
     */
    public void setAlert(MXAlert alert)
    {
        this.alert = alert;
    }
}
