/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * MAINFrame.java
 *
 * Created on Jun 20, 2011, 11:07:55 PM
 */
package Ruby;

import Ruby.acx.AEPanel;
import Ruby.acx.AXMeter;
import Ruby.acx.ASPanel;
import Ruby.acx.ATBox;
import Ruby.acx.AUPanel;
import Ruby.acx.AXConstant;
import Ruby.acx.ULPanel;
import Ruby.acx.TCPanel;
import Ruby.acx.AXNode;
import Ruby.acx.AXWorker;
import Ruby.acx.CSPanel;
import Ruby.acx.TRItem;
import Ruby.est.ESController;
import Ruby.est.ESPanel;
import Ruby.model.ALHeader;
import Ruby.sms.ALController;
import Ruby.sms.ALPanel;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.ItemEvent;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.Objects;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import static javax.swing.SwingConstants.LEFT;
import static javax.swing.SwingConstants.RIGHT;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author Pecherk
 */
public class APFrame extends javax.swing.JFrame
{

    private static final ATBox box = new ATBox(APMain.acxLog);

    /**
     * @return the box
     */
    public static ATBox getBox()
    {
        return box;
    }

    /**
     * Creates new form MAINFrame
     */
    public APFrame()
    {
        initComponents();
        showTxnTree();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        brTxnPanel = new javax.swing.JPanel();
        brTxnTableScroller = new javax.swing.JScrollPane();
        xapiTxnTable = new javax.swing.JTable();
        bigSplitPane = new javax.swing.JSplitPane();
        treePanel = new javax.swing.JPanel();
        activityBox = new javax.swing.JComboBox<>();
        txnTreeScroller = new javax.swing.JScrollPane();
        txnTree = new javax.swing.JTree();
        rightSplitPane = new javax.swing.JSplitPane();
        msgSplitPane = new javax.swing.JSplitPane();
        upperMessagePanel = new javax.swing.JPanel();
        upperTableScroller = new javax.swing.JScrollPane();
        upperTable = new javax.swing.JTable();
        lowerMessagePanel = new javax.swing.JPanel();
        lowerTableScroller = new javax.swing.JScrollPane();
        lowerTable = new javax.swing.JTable();
        displayPanel = new javax.swing.JPanel();
        displayScroller = new javax.swing.JScrollPane();
        leftToolBar = new javax.swing.JToolBar();
        shutdownButton = new javax.swing.JButton();
        aboutButton = new javax.swing.JButton();
        metersToolBar = new javax.swing.JToolBar();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        usersMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        encryptMenuItem = new javax.swing.JMenuItem();
        jSeparator10 = new javax.swing.JPopupMenu.Separator();
        shutdownMenuItem = new javax.swing.JMenuItem();
        alertsMenu = new javax.swing.JMenu();
        alertSettingsMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        alertChargesMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        manageAlertsMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        suspendAlertCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        mailerMenu = new javax.swing.JMenu();
        mailerSettingsMenuItem = new javax.swing.JMenuItem();
        manageMailerTaskMenuItem = new javax.swing.JMenuItem();
        jSeparator16 = new javax.swing.JPopupMenu.Separator();
        mailerSchemeMenuItem = new javax.swing.JMenuItem();
        mailerChargesMenuItem = new javax.swing.JMenuItem();
        jSeparator19 = new javax.swing.JPopupMenu.Separator();
        suspendMailerCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        aboutMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        brTxnPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("Processed Transactions"), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2)));

        brTxnTableScroller.setBorder(null);

        xapiTxnTable.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Table.gridColor")));
        xapiTxnTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Field", "Content", "Description"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        brTxnTableScroller.setViewportView(xapiTxnTable);

        javax.swing.GroupLayout brTxnPanelLayout = new javax.swing.GroupLayout(brTxnPanel);
        brTxnPanel.setLayout(brTxnPanelLayout);
        brTxnPanelLayout.setHorizontalGroup(
            brTxnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 669, Short.MAX_VALUE)
            .addGroup(brTxnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(brTxnTableScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE))
        );
        brTxnPanelLayout.setVerticalGroup(
            brTxnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 249, Short.MAX_VALUE)
            .addGroup(brTxnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(brTxnTableScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(APController.application + " ~ " + APController.getdClient().queryBankName());
        setForeground(java.awt.Color.white);
        setIconImage(Toolkit.getDefaultToolkit().createImage(getClass().getResource("/Ruby/ximg/icon.png")));
        setName("APFrame"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                shutdownBridge(evt);
            }
        });

        bigSplitPane.setDividerLocation(135);
        bigSplitPane.setDividerSize(8);

        treePanel.setBackground(java.awt.Color.white);
        treePanel.setMinimumSize(new java.awt.Dimension(136, 505));
        treePanel.setPreferredSize(new java.awt.Dimension(136, 505));

        activityBox.setBackground(new java.awt.Color(102, 204, 255));
        activityBox.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        activityBox.setForeground(java.awt.Color.white);
        activityBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SMS", "EST" }));
        activityBox.setBorder(null);
        activityBox.setFocusable(false);
        ((JLabel)activityBox.getRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
        ((JLabel)activityBox.getRenderer()).setVerticalAlignment(SwingConstants.CENTER);
        ((JLabel)activityBox.getRenderer()).setBorder(null);
        activityBox.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                activityBoxItemStateChanged(evt);
            }
        });

        txnTreeScroller.setBorder(null);

        txnTree.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 5, 2, 5));
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Activity");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Approved");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Rejected");
        treeNode1.add(treeNode2);
        txnTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        txnTree.setAutoscrolls(true);
        txnTree.setCellRenderer(new Ruby.acx.TRenderer());
        txnTree.setRootVisible(false);
        txnTree.setShowsRootHandles(true);
        txnTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener()
        {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt)
            {
                txnTreeValueChanged(evt);
            }
        });
        txnTreeScroller.setViewportView(txnTree);

        javax.swing.GroupLayout treePanelLayout = new javax.swing.GroupLayout(treePanel);
        treePanel.setLayout(treePanelLayout);
        treePanelLayout.setHorizontalGroup(
            treePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txnTreeScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
            .addComponent(activityBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        treePanelLayout.setVerticalGroup(
            treePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(treePanelLayout.createSequentialGroup()
                .addComponent(activityBox, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(txnTreeScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE))
        );

        bigSplitPane.setLeftComponent(treePanel);

        rightSplitPane.setBorder(null);
        rightSplitPane.setDividerLocation(440);
        rightSplitPane.setDividerSize(8);
        rightSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        rightSplitPane.setResizeWeight(1.0);
        rightSplitPane.setToolTipText("");

        msgSplitPane.setDividerLocation(220);
        msgSplitPane.setDividerSize(8);
        msgSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        msgSplitPane.setResizeWeight(0.5);

        upperMessagePanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("Request Message"), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2)));

        upperTableScroller.setBorder(null);

        upperTable.setAutoCreateRowSorter(true);
        upperTable.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Table.gridColor")));
        upperTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Field", "Content", "Description"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        upperTableScroller.setViewportView(upperTable);

        javax.swing.GroupLayout upperMessagePanelLayout = new javax.swing.GroupLayout(upperMessagePanel);
        upperMessagePanel.setLayout(upperMessagePanelLayout);
        upperMessagePanelLayout.setHorizontalGroup(
            upperMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 703, Short.MAX_VALUE)
            .addGroup(upperMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(upperTableScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 703, Short.MAX_VALUE))
        );
        upperMessagePanelLayout.setVerticalGroup(
            upperMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 182, Short.MAX_VALUE)
            .addGroup(upperMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(upperTableScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE))
        );

        msgSplitPane.setLeftComponent(upperMessagePanel);

        lowerMessagePanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("Response Message"), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2)));

        lowerTableScroller.setBorder(null);

        lowerTable.setAutoCreateRowSorter(true);
        lowerTable.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Table.gridColor")));
        lowerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Field", "Content", "Description"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        lowerTableScroller.setViewportView(lowerTable);

        javax.swing.GroupLayout lowerMessagePanelLayout = new javax.swing.GroupLayout(lowerMessagePanel);
        lowerMessagePanel.setLayout(lowerMessagePanelLayout);
        lowerMessagePanelLayout.setHorizontalGroup(
            lowerMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lowerTableScroller, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 703, Short.MAX_VALUE)
        );
        lowerMessagePanelLayout.setVerticalGroup(
            lowerMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lowerTableScroller, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
        );

        msgSplitPane.setRightComponent(lowerMessagePanel);

        rightSplitPane.setLeftComponent(msgSplitPane);

        displayConsole.setEditable(false);
        displayConsole.setBackground(new java.awt.Color(204, 255, 204));
        displayScroller.setViewportView(displayConsole);

        javax.swing.GroupLayout displayPanelLayout = new javax.swing.GroupLayout(displayPanel);
        displayPanel.setLayout(displayPanelLayout);
        displayPanelLayout.setHorizontalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 721, Short.MAX_VALUE)
            .addGroup(displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(displayScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 721, Short.MAX_VALUE))
        );
        displayPanelLayout.setVerticalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 81, Short.MAX_VALUE)
            .addGroup(displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(displayScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE))
        );

        rightSplitPane.setRightComponent(displayPanel);

        bigSplitPane.setRightComponent(rightSplitPane);

        leftToolBar.setFloatable(false);
        leftToolBar.setRollover(true);

        shutdownButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ruby/ximg/exit.png"))); // NOI18N
        shutdownButton.setToolTipText("Shutdown Ruby");
        shutdownButton.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray));
        shutdownButton.setFocusable(false);
        shutdownButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        shutdownButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        shutdownButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                shutdownRuby(evt);
            }
        });
        leftToolBar.add(shutdownButton);

        aboutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ruby/ximg/help.png"))); // NOI18N
        aboutButton.setToolTipText("About");
        aboutButton.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(0, 2, 0, 0), javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray)));
        aboutButton.setFocusable(false);
        aboutButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        aboutButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        aboutButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                showAboutInformation(evt);
            }
        });
        leftToolBar.add(aboutButton);

        metersToolBar.setBorder(null);
        metersToolBar.setFloatable(false);
        metersToolBar.setRollover(true);
        metersToolBar.setToolTipText("");
        metersToolBar.setOpaque(false);

        setMeters();

        fileMenu.setMnemonic('R');
        fileMenu.setText("Ruby");

        usersMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_MASK));
        usersMenuItem.setText("Manage Users");
        usersMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                usersMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(usersMenuItem);
        fileMenu.add(jSeparator1);

        encryptMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        encryptMenuItem.setText("Encrypt Text");
        encryptMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                encryptMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(encryptMenuItem);
        fileMenu.add(jSeparator10);

        shutdownMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        shutdownMenuItem.setText("Shutdown Ruby");
        shutdownMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                shutdownMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(shutdownMenuItem);

        menuBar.add(fileMenu);

        alertsMenu.setMnemonic('A');
        alertsMenu.setText("Alerts");

        alertSettingsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        alertSettingsMenuItem.setText("Alert Setings");
        alertSettingsMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                alertSettingsMenuItemActionPerformed(evt);
            }
        });
        alertsMenu.add(alertSettingsMenuItem);
        alertsMenu.add(jSeparator2);

        alertChargesMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        alertChargesMenuItem.setText("Alert Charges");
        alertChargesMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                alertChargesMenuItemActionPerformed(evt);
            }
        });
        alertsMenu.add(alertChargesMenuItem);
        alertsMenu.add(jSeparator4);

        manageAlertsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        manageAlertsMenuItem.setText("Manage Alerts");
        manageAlertsMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                manageAlertsMenuItemActionPerformed(evt);
            }
        });
        alertsMenu.add(manageAlertsMenuItem);
        alertsMenu.add(jSeparator3);

        suspendAlertCheckBoxMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F11, java.awt.event.InputEvent.ALT_MASK));
        suspendAlertCheckBoxMenuItem.setSelected(!ESController.isSuspended());
        suspendAlertCheckBoxMenuItem.setText("Suspend Alert");
        suspendAlertCheckBoxMenuItem.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                suspendAlertCheckBoxMenuItemItemStateChanged(evt);
            }
        });
        suspendAlertCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                suspendAlertCheckBoxMenuItemActionPerformed(evt);
            }
        });
        alertsMenu.add(suspendAlertCheckBoxMenuItem);

        menuBar.add(alertsMenu);

        mailerMenu.setMnemonic('L');
        mailerMenu.setText("Mailer");

        mailerSettingsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.ALT_MASK));
        mailerSettingsMenuItem.setText("Mailer Settings");
        mailerSettingsMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mailerSettingsMenuItemActionPerformed(evt);
            }
        });
        mailerMenu.add(mailerSettingsMenuItem);

        manageMailerTaskMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        manageMailerTaskMenuItem.setText("Manage Tasks");
        manageMailerTaskMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                manageMailerTaskMenuItemActionPerformed(evt);
            }
        });
        mailerMenu.add(manageMailerTaskMenuItem);
        mailerMenu.add(jSeparator16);

        mailerSchemeMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.ALT_MASK));
        mailerSchemeMenuItem.setText("Mailer Schemes");
        mailerSchemeMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mailerSchemeMenuItemActionPerformed(evt);
            }
        });
        mailerMenu.add(mailerSchemeMenuItem);

        mailerChargesMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.ALT_MASK));
        mailerChargesMenuItem.setText("Mailer Charges");
        mailerChargesMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mailerChargesMenuItemActionPerformed(evt);
            }
        });
        mailerMenu.add(mailerChargesMenuItem);
        mailerMenu.add(jSeparator19);

        suspendMailerCheckBoxMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F10, java.awt.event.InputEvent.ALT_MASK));
        suspendMailerCheckBoxMenuItem.setSelected(!ESController.isSuspended());
        suspendMailerCheckBoxMenuItem.setText("Suspend Mailer");
        suspendMailerCheckBoxMenuItem.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                suspendMailerCheckBoxMenuItemItemStateChanged(evt);
            }
        });
        suspendMailerCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                suspendMailerCheckBoxMenuItemActionPerformed(evt);
            }
        });
        mailerMenu.add(suspendMailerCheckBoxMenuItem);

        menuBar.add(mailerMenu);

        aboutMenu.setMnemonic('B');
        aboutMenu.setText("About");
        aboutMenu.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                aboutMenuActionPerformed(evt);
            }
        });

        aboutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, java.awt.event.InputEvent.ALT_MASK));
        aboutMenuItem.setText("About Ruby");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                aboutMenuItemActionPerformed(evt);
            }
        });
        aboutMenu.add(aboutMenuItem);

        menuBar.add(aboutMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(leftToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(metersToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(bigSplitPane))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(leftToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                    .addComponent(metersToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(5, 5, 5)
                .addComponent(bigSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)
                .addContainerGap())
        );

        bigSplitPane.setDividerLocation(bigSplitPane.getMinimumDividerLocation());
        updateDisplay();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void shutdownRuby(java.awt.event.ActionEvent evt)//GEN-FIRST:event_shutdownRuby
    {//GEN-HEADEREND:event_shutdownRuby
        // TODO add your handling code here:
        if (!getWorker().isYes(APController.lockShutdown) || adminLogin.isUserAdmin("Shutdown Ruby", "RS"))
        {
            APMain.shutdown(false);
        }
    }//GEN-LAST:event_shutdownRuby

    private void txnTreeValueChanged(javax.swing.event.TreeSelectionEvent evt)//GEN-FIRST:event_txnTreeValueChanged
    {//GEN-HEADEREND:event_txnTreeValueChanged
        // TODO add your handling code here:
        updateDisplay();
    }//GEN-LAST:event_txnTreeValueChanged

    private void shutdownBridge(java.awt.event.WindowEvent evt)//GEN-FIRST:event_shutdownBridge
    {//GEN-HEADEREND:event_shutdownBridge
        // TODO add your handling code here:
        shutdownButton.doClick();
    }//GEN-LAST:event_shutdownBridge

    private void showAboutInformation(java.awt.event.ActionEvent evt)//GEN-FIRST:event_showAboutInformation
    {//GEN-HEADEREND:event_showAboutInformation
        // TODO add your handling code here:
        showAboutInfo();
    }//GEN-LAST:event_showAboutInformation

    private void shutdownMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_shutdownMenuItemActionPerformed
    {//GEN-HEADEREND:event_shutdownMenuItemActionPerformed
        // TODO add your handling code here:
        EventQueue.invokeLater(shutdownButton::doClick);
    }//GEN-LAST:event_shutdownMenuItemActionPerformed

    private void aboutMenuActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aboutMenuActionPerformed
    {//GEN-HEADEREND:event_aboutMenuActionPerformed
        // TODO add your handling code here:
        EventQueue.invokeLater(aboutButton::doClick);
    }//GEN-LAST:event_aboutMenuActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aboutMenuItemActionPerformed
    {//GEN-HEADEREND:event_aboutMenuItemActionPerformed
        // TODO add your handling code here:
        EventQueue.invokeLater(aboutButton::doClick);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    public void setMeters()
    {
        metersToolBar.removeAll();
        metersToolBar.add(getSmsMeter());
        metersToolBar.add(getEstMeter());
    }

    private void manageAlertsMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_manageAlertsMenuItemActionPerformed
    {//GEN-HEADEREND:event_manageAlertsMenuItemActionPerformed
        if (adminLogin.isUserAdmin("Manage Alerts", "LA"))
        {
            alerts.showDialog();
        }
    }//GEN-LAST:event_manageAlertsMenuItemActionPerformed

    private void alertChargesMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_alertChargesMenuItemActionPerformed
    {//GEN-HEADEREND:event_alertChargesMenuItemActionPerformed
        // TODO add your handling code here:
        if (adminLogin.isUserAdmin("Alert Charges", "LC"))
        {
            smsCharges.showDialog(ALController.channel);
        }
    }//GEN-LAST:event_alertChargesMenuItemActionPerformed

    private void alertSettingsMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_alertSettingsMenuItemActionPerformed
    {//GEN-HEADEREND:event_alertSettingsMenuItemActionPerformed
        // TODO add your handling code here:
        if (adminLogin.isUserAdmin("Alert Settings", "LS"))
        {
            smsSettings.showDialog(ALController.channel);
        }
    }//GEN-LAST:event_alertSettingsMenuItemActionPerformed

    private void usersMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_usersMenuItemActionPerformed
    {//GEN-HEADEREND:event_usersMenuItemActionPerformed
        // TODO add your handling code here:
        if (adminLogin.isUserAdmin("Manage Users", "AU"))
        {
            usersPanel.showDialog();
        }
    }//GEN-LAST:event_usersMenuItemActionPerformed

    private void encryptMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_encryptMenuItemActionPerformed
    {//GEN-HEADEREND:event_encryptMenuItemActionPerformed
        // TODO add your handling code here:
        if (adminLogin.isUserAdmin("Encrypt Text", "AE"))
        {
            cryptPanel.showDialog();
        }
    }//GEN-LAST:event_encryptMenuItemActionPerformed

    private void activityBoxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_activityBoxItemStateChanged
    {//GEN-HEADEREND:event_activityBoxItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED)
        {
            showTxnTree();
        }
    }//GEN-LAST:event_activityBoxItemStateChanged

    private void mailerSettingsMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mailerSettingsMenuItemActionPerformed
    {//GEN-HEADEREND:event_mailerSettingsMenuItemActionPerformed
        // TODO add your handling code here:
//        if (adminLogin.isUserAdmin("Mailer Settings", "SS"))
//        {
//            estSettings.showDialog(ESController.module);
//        }
        estSettings.showDialog(ESController.module);
    }//GEN-LAST:event_mailerSettingsMenuItemActionPerformed

    private void manageMailerTaskMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_manageMailerTaskMenuItemActionPerformed
    {//GEN-HEADEREND:event_manageMailerTaskMenuItemActionPerformed
        // TODO add your handling code here:
//        if (adminLogin.isUserAdmin("Mailer Tasks", "SA"))
//        {
//            estTasks.showDialog();
//        }
        estTasks.showDialog();
    }//GEN-LAST:event_manageMailerTaskMenuItemActionPerformed

    private void mailerSchemeMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mailerSchemeMenuItemActionPerformed
    {//GEN-HEADEREND:event_mailerSchemeMenuItemActionPerformed
        // TODO add your handling code here:
        if (adminLogin.isUserAdmin("Mailer Schemes", "SE"))
        {
            estSchemes.showDialog(ESController.module);
        }
    }//GEN-LAST:event_mailerSchemeMenuItemActionPerformed

    private void mailerChargesMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mailerChargesMenuItemActionPerformed
    {//GEN-HEADEREND:event_mailerChargesMenuItemActionPerformed
        // TODO add your handling code here:
//        if (adminLogin.isUserAdmin("Mailer Charges", "SC"))
//        {
//            estCharges.showDialog(ESController.module);
//        }
        estCharges.showDialog(ESController.module);
    }//GEN-LAST:event_mailerChargesMenuItemActionPerformed

    private void suspendMailerCheckBoxMenuItemItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_suspendMailerCheckBoxMenuItemItemStateChanged
    {//GEN-HEADEREND:event_suspendMailerCheckBoxMenuItemItemStateChanged
        // TODO add your handling code here:
        if (suspendMailerCheckBoxMenuItem.isSelected() == ESController.isSuspended())
        {
//            if (adminLogin.isUserAdmin("Suspend Mailer", "SU"))
//            {
//                APController.updateSetting("SuspendMailer", (APController.suspendMailer = (suspendMailerCheckBoxMenuItem.isSelected() ? "No" : "Yes")));
//            }
            APController.updateSetting("SuspendMailer", (APController.suspendMailer = (suspendMailerCheckBoxMenuItem.isSelected() ? "No" : "Yes")));
            suspendMailerCheckBoxMenuItem.setText(ESController.isSuspended() ? "Start Mailer" : "Suspend Mailer");
            suspendMailerCheckBoxMenuItem.setSelected(!ESController.isSuspended());
            if (ESController.isSuspended())
            {
                estMeter.setConnected(false, "SUSPENDED");
            }
            else
            {
                estMeter.setConnected(true, "ONLINE");
            }

        }
    }//GEN-LAST:event_suspendMailerCheckBoxMenuItemItemStateChanged

    private void suspendMailerCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_suspendMailerCheckBoxMenuItemActionPerformed
    {//GEN-HEADEREND:event_suspendMailerCheckBoxMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_suspendMailerCheckBoxMenuItemActionPerformed

    private void suspendAlertCheckBoxMenuItemItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_suspendAlertCheckBoxMenuItemItemStateChanged
    {//GEN-HEADEREND:event_suspendAlertCheckBoxMenuItemItemStateChanged
        // TODO add your handling code here:
        if (suspendAlertCheckBoxMenuItem.isSelected() == ALController.isSuspended())
        {
//            if (adminLogin.isUserAdmin("Suspend Mailer", "SU"))
//            {
//                APController.updateSetting("SuspendMailer", (APController.suspendMailer = (suspendMailerCheckBoxMenuItem.isSelected() ? "No" : "Yes")));
//            }
            APController.updateSetting("SuspendAlert", (APController.suspendAlert = (suspendAlertCheckBoxMenuItem.isSelected() ? "No" : "Yes")));
            suspendAlertCheckBoxMenuItem.setText(ALController.isSuspended() ? "Start Alerts" : "Suspend Alerts");
            suspendAlertCheckBoxMenuItem.setSelected(!ALController.isSuspended());

            if (ALController.isSuspended())
            {
                smsMeter.setConnected(false, "SUSPENDED");
            }
            else
            {
                smsMeter.setConnected(true, "ONLINE");
            }

        }
    }//GEN-LAST:event_suspendAlertCheckBoxMenuItemItemStateChanged

    private void suspendAlertCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_suspendAlertCheckBoxMenuItemActionPerformed
    {//GEN-HEADEREND:event_suspendAlertCheckBoxMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_suspendAlertCheckBoxMenuItemActionPerformed

    public final void showTxnTree()
    {
        try
        {
            ArrayList<AXNode> vec = new ArrayList<>();
            DefaultMutableTreeNode txnRootNode = ((DefaultMutableTreeNode) txnTree.getModel().getRoot());
            DefaultMutableTreeNode approvedNode = (DefaultMutableTreeNode) txnRootNode.getFirstChild();

            DefaultMutableTreeNode rejectedNode = (DefaultMutableTreeNode) txnRootNode.getLastChild();
            approvedNode.removeAllChildren();
            rejectedNode.removeAllChildren();

            switch (getWorker().getBoxValue(activityBox).toUpperCase())
            {
                case "SMS":
                    vec.add(new AXNode("AO", "Account Opening"));
                    vec.add(new AXNode("CR", "Credit Alerts"));
                    vec.add(new AXNode("DR", "Debit Alerts"));
                    vec.add(new AXNode("LD", "Loan Due Alerts"));

                    vec.add(new AXNode("LP", "Loan Approval"));
                    vec.add(new AXNode("TD", "Term Deposit Approval"));
                    vec.add(new AXNode("LC", "Loan Clearance"));

                    vec.add(new AXNode("LT", "Loan Topup Eligibility"));
                    vec.add(new AXNode("LA", "Loan Arrears Alerts"));
                    vec.add(new AXNode("BR", "Broadcast Alerts"));

                    vec.add(new AXNode("WR", "Credit Alerts Channe;s"));
                    vec.add(new AXNode("GR", "Guarantor Notification"));

                    setTreeLog(ALController.getTreeLog());
                    setHeaders(ALController.getHeaders());
                    break;
                case "EST":
                    vec.add(new AXNode("D", "Daily Statement"));
                    vec.add(new AXNode("W", "Weekly Statement"));
                    vec.add(new AXNode("M", "Monthly Statement"));

                    vec.add(new AXNode("Q", "Quarterly Statement"));
                    vec.add(new AXNode("A", "Annual Statement"));
                    vec.add(new AXNode("O", "One-Off Statement"));

                    setTreeLog(ESController.getTreeLog());
                    setHeaders(ALController.getHeaders());
                    break;
            }

            vec.stream().forEach((item)
                    ->
            {
                setNodeItems(approvedNode, rejectedNode, getTreeLog(), item);
            });

            getWorker().expandAllNodes(txnTree, TRItem.class);
            vec.clear();
        }
        catch (Exception ex)
        {
            APMain.acxLog.logEvent(ex);
        }
    }

    private void setNodeItems(DefaultMutableTreeNode approvedNode, DefaultMutableTreeNode rejectedNode, ArrayList<TRItem> list, AXNode node)
    {
        DefaultMutableTreeNode approvedItems = new DefaultMutableTreeNode(node.getClone(true));
        DefaultMutableTreeNode rejectedItems = new DefaultMutableTreeNode(node.getClone(false));
        try
        {
            list.stream().filter((item) -> (Objects.equals(node.getCode(), item.getCode()))).forEach((item)
                    ->
            {
                if (item.isApproved())
                {
                    approvedItems.insert(new DefaultMutableTreeNode(item), 0);
                }
                else
                {
                    rejectedItems.insert(new DefaultMutableTreeNode(item), 0);
                }
            });
        }
        catch (Exception ex)
        {
            ex = null;
        }
        approvedNode.add(approvedItems);
        rejectedNode.add(rejectedItems);
    }

    public void updateDisplay()
    {
        try
        {
            DefaultMutableTreeNode selectedTxnNode = (DefaultMutableTreeNode) txnTree.getLastSelectedPathComponent();
            if (selectedTxnNode != null)
            {
                int splitLoc = rightSplitPane.getDividerLocation();
                Object selectedObject = selectedTxnNode.getUserObject();
                if (selectedObject instanceof TRItem)
                {
                    rightSplitPane.setTopComponent(msgSplitPane);
                    rightSplitPane.setDividerLocation(splitLoc);
                    AXNode node = (AXNode) ((DefaultMutableTreeNode) selectedTxnNode.getParent()).getUserObject();

                    upperMessagePanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(node.getDescription() + " Request"), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2)));
                    lowerMessagePanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(node.getDescription() + " Response"), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2)));

                    upperTableScroller.setViewportView(prepareTable(getWorker().createItemTable(((TRItem) selectedObject).getRequest())));
                    lowerTableScroller.setViewportView(prepareTable(getWorker().createItemTable(((TRItem) selectedObject).getResponse())));
                }
                else if (selectedObject instanceof AXNode)
                {
                    AXNode node = (AXNode) selectedObject;
                    rightSplitPane.setTopComponent(brTxnPanel);

                    rightSplitPane.setDividerLocation(splitLoc);
                    brTxnPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder((node.isApproved() ? "Approved " : "Rejected ") + node.getDescription()), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2)));
                    brTxnTableScroller.setViewportView(createDetailTable(node));
                }
            }
        }
        catch (Exception ex)
        {
            APMain.acxLog.logEvent(ex);
        }
    }

    public JTable createDetailTable(AXNode tXNode)
    {
        JTable table = new JTable();
        ArrayList row = new ArrayList();
        ArrayList<Object[]> data = new ArrayList<>();

        LinkedHashSet<ALHeader> columns = new LinkedHashSet<>();
        getTreeLog().stream().filter((item) -> (Objects.equals(tXNode.getCode(), item.getCode()) && tXNode.isApproved() == item.isApproved())).map((item)
                ->
        {
            getHeaders().stream().filter((header) -> (item.getDetail().containsKey(header))).map((header)
                    ->
            {
                row.add(item.getDetail().get(header));
                return header;
            }).forEach((header)
                    ->
            {
                columns.add(header);
            });
            return item;
        }).map((_item)
                ->
        {
            data.add(0, row.toArray());
            return _item;
        }).forEach((_item)
                ->
        {
            row.clear();
        });

        table.setModel(new javax.swing.table.DefaultTableModel(data.toArray(new Object[0][0]), columns.isEmpty() ? getHeaders().toArray() : columns.toArray())
        {
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return false;
            }
        });

        table.getColumnModel().getColumn(0).setCellRenderer(new DefaultTableCellRenderer()
        {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
            {
                JLabel label = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                label.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 5));
                label.setFont(new Font(label.getFont().getName(), Font.BOLD, label.getFont().getSize()));

                label.setBackground(new java.awt.Color(102, 204, 255));
                label.setHorizontalAlignment((value instanceof Integer || value instanceof BigDecimal || value instanceof Number) ? RIGHT : LEFT);
                return label;
            }
        });

        table.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Table.gridColor")));
        table.setPreferredScrollableViewportSize(new Dimension(1200, table.getRowCount() * table.getRowHeight()));
        return prepareTable(table);
    }

    public JTable prepareTable(JTable table)
    {
        table.setAutoCreateRowSorter(true);
        int columnCount = table.getColumnCount();

        table.getTableHeader().setFont(new Font(table.getTableHeader().getFont().getName(), Font.BOLD, table.getTableHeader().getFont().getSize()));
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        for (int i = 0; i < columnCount; i++)
        {
            final boolean firstColumn = i == 0;
            table.getColumnModel().getColumn(i).setCellRenderer(new DefaultTableCellRenderer()
            {
                @Override
                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
                {
                    JLabel label = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                    label.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 5));
                    if (firstColumn)
                    {
                        label.setFont(new Font(label.getFont().getName(), Font.BOLD, label.getFont().getSize()));
                        label.setBackground(new java.awt.Color(102, 204, 255));
                    }
                    label.setHorizontalAlignment((value instanceof Integer || value instanceof BigDecimal || value instanceof Number) ? RIGHT : LEFT);
                    return label;
                }
            });
        }

        for (int i = 0; i < columnCount; i++)
        {
            if (i == 0)
            {
                table.getColumnModel().getColumn(i).setMinWidth(100);
                table.getColumnModel().getColumn(i).setMaxWidth(100);
            }
            else
            {
                table.getColumnModel().getColumn(i).setMinWidth(columnCount > 3 ? 150 : 325);
            }
        }

        return table;
    }

    public void insertTreeItem(TRItem item, String channel)
    {
        switch (channel)
        {
            case "SMS":
                ALController.getTreeLog().add(item);
                break;
            case "EST":
                ESController.getTreeLog().add(item);
                break;
        }
        if (Objects.equals(getWorker().getBoxValue(activityBox).toUpperCase(), channel.toUpperCase()))
        {
            DefaultTreeModel model = (DefaultTreeModel) txnTree.getModel();
            DefaultMutableTreeNode rootNode = ((DefaultMutableTreeNode) model.getRoot());
            DefaultMutableTreeNode node, parentNode = (DefaultMutableTreeNode) (item.isApproved() ? rootNode.getFirstChild() : rootNode.getLastChild());

            for (int i = 0; i < parentNode.getChildCount(); i++)
            {
                node = (DefaultMutableTreeNode) parentNode.getChildAt(i);
                if (Objects.equals(((AXNode) node.getUserObject()).getCode(), item.getCode()))
                {
                    model.insertNodeInto(new DefaultMutableTreeNode(item), node, 0);
                    break;
                }
            }
        }
    }

    public void purgeTreeItems()
    {
        try
        {
            boolean update = false;
            while (getTreeLog().size() > APController.treeLogSize)
            {
                getTreeLog().remove(0);
            }
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) txnTree.getLastSelectedPathComponent();
            for (int i = txnTree.getRowCount() - 1; i >= 0; i--)
            {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) txnTree.getPathForRow(i).getLastPathComponent();
                if (node.getUserObject() instanceof TRItem)
                {
                    if (!getTreeLog().contains((TRItem) node.getUserObject()))
                    {
                        ((DefaultTreeModel) txnTree.getModel()).removeNodeFromParent(node);
                        if (Objects.equals(selectedNode, node))
                        {
                            update = true;
                        }
                    }
                }
            }
            if (update)
            {
                getWorker().expandAllNodes(txnTree, TRItem.class);
            }
        }
        catch (Throwable ex)
        {
            APMain.acxLog.logEvent(ex);
        }
    }

    private void showAboutInfo()
    {
        JOptionPane.showMessageDialog(this,
                "<html><font face=\"Arial\" weight=\"plain\" size=\"2\">Ruby Alerts version 4.0.0, Product licensed to " + getdClient().queryBankName() + ", Mukurweini, Kenya"
                + "<br/>Copyright \u00A9 2017-" + AXConstant.yearFormat.format(new Date()) + ", Neptune Software Plc, 7th floor Victoria Towers,"
                + "<br/>Kilimanjaro Road, Upperhill, Nairobi Kenya. All rights reserved.</font></html>", APController.application, JOptionPane.INFORMATION_MESSAGE);
    }

    public void setSmsCounter(int c)
    {
        getSmsMeter().setLowerCounter(c);
    }

    public void showSmsSignal(String txn, boolean outwards)
    {
        getSmsMeter().setValue(outwards ? 400 : -400, txn);
    }

    public void setSmsCounter(int c, boolean outwards)
    {
        getSmsMeter().setUpperCounter(c);
    }

    public void showEstSignal(String txn, boolean outwards)
    {
        getEstMeter().setValue(outwards ? 400 : -400, txn);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aboutButton;
    private javax.swing.JMenu aboutMenu;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JComboBox<String> activityBox;
    private javax.swing.JMenuItem alertChargesMenuItem;
    private javax.swing.JMenuItem alertSettingsMenuItem;
    private javax.swing.JMenu alertsMenu;
    private javax.swing.JSplitPane bigSplitPane;
    private javax.swing.JPanel brTxnPanel;
    private javax.swing.JScrollPane brTxnTableScroller;
    public static final javax.swing.JTextPane displayConsole = Ruby.APMain.console;
    private javax.swing.JPanel displayPanel;
    private javax.swing.JScrollPane displayScroller;
    private javax.swing.JMenuItem encryptMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator10;
    private javax.swing.JPopupMenu.Separator jSeparator16;
    private javax.swing.JPopupMenu.Separator jSeparator19;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JToolBar leftToolBar;
    private javax.swing.JPanel lowerMessagePanel;
    private javax.swing.JTable lowerTable;
    private javax.swing.JScrollPane lowerTableScroller;
    private javax.swing.JMenuItem mailerChargesMenuItem;
    private javax.swing.JMenu mailerMenu;
    private javax.swing.JMenuItem mailerSchemeMenuItem;
    private javax.swing.JMenuItem mailerSettingsMenuItem;
    private javax.swing.JMenuItem manageAlertsMenuItem;
    private javax.swing.JMenuItem manageMailerTaskMenuItem;
    public javax.swing.JMenuBar menuBar;
    private javax.swing.JToolBar metersToolBar;
    private javax.swing.JSplitPane msgSplitPane;
    private javax.swing.JSplitPane rightSplitPane;
    private javax.swing.JButton shutdownButton;
    private javax.swing.JMenuItem shutdownMenuItem;
    private javax.swing.JCheckBoxMenuItem suspendAlertCheckBoxMenuItem;
    private javax.swing.JCheckBoxMenuItem suspendMailerCheckBoxMenuItem;
    private javax.swing.JPanel treePanel;
    private javax.swing.JTree txnTree;
    private javax.swing.JScrollPane txnTreeScroller;
    private javax.swing.JPanel upperMessagePanel;
    private javax.swing.JTable upperTable;
    private javax.swing.JScrollPane upperTableScroller;
    private javax.swing.JMenuItem usersMenuItem;
    private javax.swing.JTable xapiTxnTable;
    // End of variables declaration//GEN-END:variables

    private final ALPanel alerts = new ALPanel();
    private final AXMeter smsMeter = new AXMeter("SMS", 1);
    private final AXMeter estMeter = new AXMeter("EST", 2);
    private final TCPanel smsCharges = new TCPanel();

    private final ASPanel smsSettings = new ASPanel();
    private final ULPanel adminLogin = new ULPanel();
    private final AEPanel cryptPanel = new AEPanel();

    private final CSPanel estSchemes = new CSPanel();
    private final ASPanel estSettings = new ASPanel();
    private final TCPanel estCharges = new TCPanel();
    private final ESPanel estTasks = new ESPanel();

    private final AUPanel usersPanel = new AUPanel();
    private ArrayList<ALHeader> headers = ALController.getHeaders();
    private ArrayList<TRItem> treeLog = ALController.getTreeLog();

    /**
     * @return the smsMeter
     */
    public AXMeter getSmsMeter()
    {
        return smsMeter;
    }

    /**
     * @return the treeLog
     */
    public ArrayList<TRItem> getTreeLog()
    {
        return treeLog;
    }

    /**
     * @param treeLog the treeLog to set
     */
    public void setTreeLog(ArrayList<TRItem> treeLog)
    {
        this.treeLog = treeLog;
    }

    /**
     * @return the headers
     */
    public ArrayList<ALHeader> getHeaders()
    {
        return headers;
    }

    /**
     * @param headers the headers to set
     */
    public void setHeaders(ArrayList<ALHeader> headers)
    {
        this.headers = headers;
    }

    private AXWorker getWorker()
    {
        return getBox().getWorker();
    }

    private DBClient getdClient()
    {
        return getBox().getdClient();
    }

    /**
     * @return the estMeter
     */
    public AXMeter getEstMeter()
    {
        return estMeter;
    }
}
